#!/usr/bin/perl
# -*- tab-width: 4 -*-"
###############################################
#
#	Runs source-tree indexation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
###############################################

# ajl 2016-10-26
# NOTE: this file contains lines commented out with a #MT prefix.
#	These lines are part of an experiment to perform simultaneously
#	free-text indexing and definition/usage collection.
#	Results showed that the processes where competing for the I/O bus
#	(file reads, provate file writes and DB I/O) and finally were
#	slowed down waiting for data.
#	Code is left here in case some new idea would remove the culprit.

use strict;
use lib 'lib', 'scripts';
use Fcntl;
use Getopt::Long qw(:config gnu_getopt);
use IO::Handle;
use File::Path qw(make_path remove_tree);
use File::MMagic;

use LXR::Files;
use LXR::Index;
use LXR::Config;
use LXR::Common;

use VTescape;
use Tagger;

my $lxrconf = $LXR::Config::confname;	# TODO: allow override through an option

my %option;
GetOptions	(\%option
			, 'help!'
			, 'url=s'
			, 'tree=s'
			, 'version=s'
			, 'allurls'
			, 'allversions:s'
			, 'reindexall'
			, 'checkonly'
			, 'accept'
#MT 			, 'S'
			, 'T'
			, 'novacuum'
			, 'U'
			);

if ($option{'help'}) {

	# this may not be the best way to implement this, but at least it's something
	print <<END_HELP;
Usage: genxref [option ...]

The genxref program automatically generates LXR database cross-reference
tokens for a set of URL configuration blocks and source code versions.  These
are both defined in the $lxrconf configuration file.  Each "URL" is a separate
source tree; LXR separates and identifies these by their URL.  Each "version" is
a different version of the source tree being indexed.  See file $lxrconf or
script configure-lxr.pl for configuring URLs and versions.

Valid options are:
  --help             Print a summary of the options.
  --url=URL          Generate tokens for the given URL configuration block.
  --tree=TREE_NAME   To be used in addition to --url in multiple-trees context
                     if LXR configured to identify trees through 'argument'.
  --allurls          Generate tokens for all URL configuration blocks.
  --version=VERSION  Generate tokens for the given version of the code.
  --allversions      Generate tokens for all versions of the code (default).
  --reindexall       Purges existing index data
  --checkonly        Verify tools version and stop
  --accept           Accept parameter suggestions to continue with indexing
  -T                 Do not trace activity
                     Note: with "monster" trees like Linux kernel, this means
                           nothing will be printed for hours; check the disk
                           activity LED before deciding that your computer
                           is frozen. Don't foolishly kill the task or reboot
                           the computer!
  --novacuum         Do not VACUUM database tables after generating the
                     cross-references (mainly for PostgreSQL because it sollicits
                     password from the user preventing unattended operation;
                     VACUUM can always be launched manually)
  -U                 Same as --vacuum, but only for PostgreSQL databases
  
Report bugs at http://sourceforge.net/projects/lxr/.
END_HELP
	exit 0;
}

my $failure = 0;	# Cumulative failure indicator

if	(	!$option{'checkonly'}
	&&	!$option{'url'}
	&&	!$option{'allurls'}
	) {
	die("${VTred}ERROR:${VTnorm} in real mode (not checking mode set by ${VTbold}--checkonly${VTnorm}),\n"
		. "an URL must be specified through ${VTyellow}--url${VTnorm} or ${VTyellow}--allurls${VTnorm}.\n"
		. "Try \"genxref --help\".\n");
}
if	(	exists($option{'url'})
	&&	exists($option{'allurls'})
	) {
	die("${VTred}ERROR:${VTnorm} options ${VTyellow}--url${VTnorm} and ${VTyellow}--allurls${VTnorm}"
		. "cannot be specified simultaneously.\n");
}
if	(	!exists($option{'allversions'})
	&&	!exists($option{'version'})
	) {
# Create a courtesy --allversions option to simplify further coding, so that we do not
# repeatedly code exists($options{'allversions'} || !exists($options('version'). Checking
# for --allurls will be enough.
	$option{'allversions'} = ' ';
}


my $trace = !$option{'T'};


##############################################################
#
#				Read lxr.conf global section
#
##############################################################

# Dummy sub to disable 'range' file reads
sub readfile {}

my @config;
my $global;		# Global section in configuration file
if (open(CONFIG, $lxrconf)) {
	my $oldsep = $/;
	$/ = undef;
	my $config_contents = <CONFIG>;
	$/ = $oldsep;
	close(CONFIG);
	$config_contents =~ m/(.*)/s;
	$config_contents = $1;    #untaint it
	@config = eval("\n#line 1 \"configuration file\"\n" . $config_contents);
	die($@) if $@;

	$global = shift(@config);	# Global parameters
} else {
	print "${VTred}ERROR:${VTnorm} could not open configuration file ${VTred}$lxrconf${VTnorm}\n";
	exit(1) unless $option{'checkonly'};
	$failure |= 1;
}


#######################################
###
###               Part 1
###
###  Check environment
###
###

printf "Checking     Perl     version ... %vd\n", $^V;
if ($^V ge v5.10.0) {
	print VTCUU(1), "${VTgreen}[  OK  ]${VTnorm}\n";
} else {
	print VTCUU(1), "${VTred}[${VTslow}FAILED${VTnorm}${VTred}]${VTnorm}\n";
	$failure |= 1;
}

# Check tools version
#	Return value:
#	.	-2.	version too low for forced parm (see 1)
#	.	-1	version too low
#	.	0	software tool not found
#	.	1	OK but conf parm set
#	.	2	everything fine

sub check_tool {
	my ($tl_param, $tl_name, $tl_option, $tl_version, $name_constraint) = @_;
	my $tool;
	my $toolloc;
	my $toolforced = 0;
	my $version;

	if ($global && $global->{$tl_param}) {
		$tool = $global->{$tl_param};
			# Make further tests on designated tool
		$toolloc = `command -v $tool 2>/dev/null`;
		if ($toolloc !~ s/\n$//s) {
			print "${VTred}'$tl_param' does not name an existing $tl_name utility${VTnorm}\n";
			delete $global->{$tl_param};
		} else {
			my $systoolloc = `command -v $tl_name 2>/dev/null`;
			if ($systoolloc =~ s/\n$//s) {
				if ($systoolloc ne $toolloc) {
					print "${VTyellow}'$tl_param' not equal to `command -v $tl_name`${VTnorm}\n";
					print "If this is a non-system copy, ignore this warning\n";
				}
			}
		}
	} else {
		print("${VTyellow}Parameter '$tl_param' not defined - trying to find $tl_name${VTnorm}\n");
	}
	if (!$toolloc) {
		$toolloc = `command -v $tl_name 2>/dev/null`;
		$toolloc =~ s/\n$//s;
	}
	if (!$toolloc) {
		print "${VTred}$tl_name not found,${VTnorm} `command -v $tl_name` returned a null string\n";
		if ($global) {
			delete $global->{$tl_param};
		}
		return 0;
	}
	if ($global) {
		if (!$global->{$tl_param}) {
			$global->{$tl_param} = $toolloc;
			$toolforced = 1;
			$tool = $toolloc;
			print "$tl_name found at ${VTyellow}$toolloc${VTnorm}\n";
			print "Manually update $lxrconf for permanent setting if needed\n";
		}
	} else {
		print "$tl_name found at ${VTyellow}$toolloc${VTnorm}\n";
		$tool = $toolloc;
	}

	my $nmwidth = 14;
	print "Checking", ' 'x(($nmwidth-length($tl_name)+1)/2);
	print $tl_name, ' 'x(($nmwidth-length($tl_name))/2);
	$version = `$tool $tl_option`;
	if 	(	defined($name_constraint)
		&&	$version !~ $name_constraint
		) {
		print "name constraint  ... $name_constraint\n";
		print VTCUU(1), "${VTred}[${VTslow}FAILED${VTnorm}${VTred}]${VTnorm}\n";
		return -1 - $toolforced;
	}
	print "version ... ";
	if ($version =~ m/.*$tl_name .*?((\d+\.)*\d+)/i) {
		$version = $1;
	} else {
		$version = undef;
	}
	print "$version\n";
	if (defined($tl_version) && $tl_version ne '0') {
		if	(  !defined($version)
			|| eval( 'v' . $version) lt eval( 'v' . $tl_version)
			) {
			print VTCUU(1), "${VTred}[${VTslow}FAILED${VTnorm}${VTred}]${VTnorm}\n";
			print "$tl_name version $tl_version or above required, found $version\n";
			return -1 - $toolforced; 
		} else {
			print VTCUU(1), "${VTgreen}[  OK  ]${VTnorm}\n";
		}
	} else {
			print VTCUU(1), "${VTyellow}Checked:${VTnorm}\n";
	}
	return 2 -$toolforced;
}

my $foundglimpse = 0;
my $foundswishe = 0;

my $ct = check_tool	( 'ectagsbin'
					, 'ctags'
					, '--version', '5'
					, qr/exuberant/i
					);
if ($ct == 0) {
	print "genxref can't index source-tree without ctags\n";
	print "Find its location or install it and fix 'ectagsbin'\n";
	$failure |= 1;
} elsif ($ct == 1) {
	print "ctags fixed for genxref, but LXR browsing will not work\n";
	$failure |= 2;
} elsif ($ct < 0) {
	$failure |= 1;
}

$foundglimpse = check_tool('glimpsebin', 'glimpse', '-V', '0');
check_tool('glimpseindex', 'glimpseindex', '-V', '0');
$foundswishe = check_tool('swishbin', 'swish-e', '-V', '2.1');

#	The following verifications are a bit "over-kill"
#	because there is presently no check on version level
#	on glimpse. But that could change in the future.
if ($foundglimpse == 0 && $foundswishe == 0) {
	# No engine defined - propose to go on without
	print "${VTyellow}Neither 'glimpsebin' nor 'swishbin' defined${VTnorm}\n";
	print "${VTyellow}Disabling free-text search${VTnorm}\n";
	if ($global) {
		$global->{'glimpsebin'} = '/usr/bin/true';
	}
	$failure |= 2;
} elsif ($foundglimpse == 2 && $foundswishe == 2) {
	# Both engines defined - do not know what to do
	print "${VTred}Both 'glimpsebin' and 'swishbin' defined${VTnorm}\n";
	print "Choose one of them by commenting the other in $lxrconf\n";
	$failure |= 1;
} elsif ($foundglimpse <= 0 && $foundswishe <= 0) {
	# Can't use any search engine
	# (either not found or version too low)
	# But check if user disabled free-text search with suggested tip
	if	(	$foundglimpse < 0	# true has no version
			&& $global->{'glimpsebin'} =~ m:(^|/)true$:
			&& $foundswishe == 0
		||	$foundswishe < 0
			&& $global->{'swishbin'} =~ m:(^|/)true$:
			&& $foundglimpse == 0
		) {
	#	Leave $failure "as is" when user disables search
	} else {
		$failure |= 1
	}
} elsif ($foundglimpse == 1 && $foundswishe <= 1) {
	# glimpse has been forced, but glimpse is prefered if both
	print "${VTyellow}Warning:${VTnorm} using existing ${VTbold}glimpse${VTnorm}\n";
	delete $global->{'swishbin'} if ($global);
	$failure |= 2;
} elsif ($foundswishe == 1 && $foundglimpse <= 0) {
	# swish-e has been forced, but glimpse is prefered if both
	print "${VTyellow}Warning:${VTnorm} using existing ${VTbold}swish-e${VTnorm}\n";
	delete $global->{'glimpsebin'} if ($global);
	$failure |= 2;
} elsif ($foundglimpse == 2) {
	# Standard glimpse selection, but for the case of both
	# engines present and swish-e has too low a version
	if ($foundswishe == -1) {
		print "${VTyellow}Warning:${VTnorm} forcing use of ${VTbold}glimpse${VTnorm}\n";
		delete $global->{'swishbin'} if ($global);
		$failure |= 2;
	}
} elsif ($foundswishe == 2) {
	# Standard swish-e selection, but for the case of both
	# engines present and glimpse has too low a version
	if ($foundglimpse == -1) {
		print "${VTyellow}Warning:${VTnorm} forcing use of ${VTbold}swish-e${VTnorm}\n";
	delete $global->{'glimpsebin'} if ($global);
		$failure |= 2;
	}
}

# End of general checks
if ($option{'checkonly'}) {
	print "${VTyellow}genxref stopped without indexing by --checkonly option${VTnorm}\n";
	exit;
}
if ($failure > 1) {
	if ($option{'accept'}) {
		print "\nParameter changes accepted by option --accept without writing them in $lxrconf\n";
		print "Indexing may eventually complete but expect malfunction in LXR browsing\n";
		print "till you fix configuration file $lxrconf\n\n";
		$failure = 0;
	} else {
		print "\ngenxref suggested changes to your configuration\n";
		print "You can test their effect with option ${VTyellow}--accept${VTnorm}\n";
	}
}
if ($failure > 0) {
	die "${VTred}Aborting due to previous errors${VTnorm}";
}


#######################################
###
###               Part 2
###
###  Index source tree(s)
###
###

my %versionset;		# cumulative version set
my $autoversionflag;
my $versioninprogress;	# for exception handler
my $reindexmode;	# --reindexall state equivalent and exception handler use
my $milestone = 0;	# genxref's milestones during version indexation:
					#  0 : in progress
					# 'P': purge
					# 'T': free-text search indexing
					# 'D': definition collection
					# 'U': usage collection
my $starttime;	# milestone dates as wall time
my $stepstart;	# (more meaningful to casual user than system user time)
my ($purgestart, $purgeend);
my ($textstart, $textend);
my ($dclstart, $dclend);
my ($refstart, $refend);
#MT my $childpid;

my %binaryfiles;

my $printdirbanner;	# Flag to print again directory banner
# Frequency of directory name repetition
my $repeatbannerevery = 25;
my $repeatbannercountdown = $repeatbannerevery;

my $hostname = $global->{'host_names'}[0];	# Global host name
if ($option{'url'}) {	# Single 'url'
	@config = (1);		# Fake list to prevent looping
}

#	Loop on tree sections (global section already removed)
foreach my $treedescr (@config) {
	my $url;
	my $host;
	my $virtroot;
	if ($url = $option{'url'}) {
		($host, $virtroot) = $url =~ m!^(.*//[^/]+)(/.*)?!;
		$config = LXR::Config->new	( $host
									, $virtroot
									, $option{'tree'}
									);
	} else {
		if (defined($hostname)) {
			$host = $hostname;
			$virtroot = $treedescr->{'virtroot'} // $global->{'virtroot'};
		} else {
			($host, $virtroot)
				= $treedescr->{'baseurl'} =~ m!^(.*//[^/]+)(/.*)?!;
		}
		$config = LXR::Config->new	( $host
									, $virtroot
									, $treedescr->{'treename'}
									);
		$url = $host . $virtroot;
		print STDERR "\n${CSI}44m${VTwhite}Processing $url${VTnorm}";
		print STDERR " == ${CSI}41m${VTwhite}tree $treedescr->{'treename'}${VTnorm}\n"
			if $treedescr->{'treename'};
		print STDERR "\n";
	}

	die("${VTred}No matching configuration${VTnorm}") unless exists($config->{'sourceroot'});

	if (!exists($config->{'sourceroot'})) {
		die "${VTred}No 'sourceroot' for "
			. $config->{'virtroot'}
			. " - Can't run${VTnorm}\n";
	}

	if (!exists($config->{'variables'}{'v'})) {
		die "${VTred}Variable 'v' needed to define versions "
			. $config->{'virtroot'}
			. " - Can't run${VTnorm}\n";
	}

	$files = LXR::Files->new($config);
	die "${VTred}Can't create file access object ${VTnorm}" . $config->{'sourceroot'}
		if !defined($files);
	$LXR::Index::database_id++;		# Changing database
	$index = LXR::Index->new($config);
	die "${VTred}Can't create Index ${VTnorm}" . $config->{'dbname'}
		if !defined($index);
	$index->write_open();	# enable write transactions

	%binaryfiles = ();

	my @versions;
	$autoversionflag = 0;
	$repeatbannercountdown = $repeatbannerevery;

	if (exists($option{'allversions'})) {
		if	(  $files->isa('LXR::Files::CVS')
			&& ref($config->{'variables'}{'v'}{'range'}) eq 'CODE'
			) {
			print STDERR "Using automatic CVS version enumeration\n";
			$autoversionflag = 1;
		} else {
			@versions = $config->varrange('v');
			die "${VTred}Option --allversions cannot be used because no versions found automatically.${VTnorm}"
				. "\nUse --version=VERSION or fix $lxrconf.\n"
				if scalar @versions <= 0;
		}
	} else {
		@versions = $option{'version'};
		my $version_OK = 0;
		for ($config->varrange('v')) {
			if ($versions[0] eq $_) {
				$version_OK = 1;
				last;
			}
		}
		my $version_exists = 1;
		if	($files->isa('LXR::Files::Plain')) {
			$version_exists = $files->isdir('/', $versions[0]); 
		}
		if (!$version_OK || !$version_exists) {
			print STDERR "${VTred}ERROR:${VTnorm} ";
			if ($version_OK) {
				print STDERR "no corresponding directory ${VTwhite}", $versions[0], "${VTnorm} in source root\n";
			} elsif ($version_exists) {
				print STDERR "version ${VTwhite}", $versions[0], "${VTnorm} not listed in ${VTwhite}lxr.conf${VTnorm}, ";
				print STDERR "but a directory exists in source root\n";
			} else {
				print STDERR "unknown version ${VTwhite}", $versions[0], "${VTnorm}\n";
			}
			die "${VTred}No version to index.${VTnorm}\n"
		}
	}

	%versionset = ();
	$SIG{__DIE__} = \&abortcleanup;
	$SIG{'INT'} = \&abortcleanup;
	$starttime = time();
	$index->saveperformance('', 0 , '', $starttime, 0);
	$milestone = 'P';

	if ($files->isa('LXR::Files::CVS') && scalar(@versions)<=0) {
		$reindexmode = 1;
		$purgestart = $starttime;
		$stepstart = $purgestart;
		$versioninprogress = 'CVS all versions';
		$index->saveperformance($versioninprogress, 1, $milestone, $purgestart, 0);
		print STDERR "\nFull database purge ... ${VTyellow}${VTslow}in progress${VTnorm}\n";
		$index->purgeall();
		$index->saveperformance('', 0 , '', $starttime, 0);	# rewrite erased record
		$purgeend = time();
		print STDERR &VTCUU(1), &VTCHA(25), &VTEL(0), "${VTgreen}Done${VTnorm}\n";
		$index->saveperformance($versioninprogress, 1, $milestone, $purgestart, $purgeend);
		$$LXR::Common::HTTP{'param'}{'_showattic'} = 1;
		$printdirbanner = 1;
		$milestone = 'D';
		$dclstart = time();
		$stepstart = $dclstart;
		$index->saveperformance($versioninprogress, 1, $milestone, $dclstart, 0);
		directorytreetraversal	( \&Tagger::processfile
								, 'head'
								, ''
								, '/'
								);
		$dclend = time();
		$index->saveperformance($versioninprogress, 1, $milestone, $dclstart, $dclend);
		$printdirbanner = 1;
		$milestone = 'U';
		$refstart = time();
		$stepstart = $refstart;
		$index->saveperformance($versioninprogress, 1 ,$milestone, $refstart, 0);
		$autoversionflag++ if $autoversionflag;	# Don't do it again
		directorytreetraversal	( \&Tagger::processrefs
								, 'head'
								, ''
								, '/'
								);
		$refend = time();
		$index->saveperformance($versioninprogress, 1 ,$milestone, $refstart, $refend);
	# Indexing summary for this version
		STDERR->autoflush(1);
		print "\n";
		print "\n${CSI}44m${VTwhite}Summary for $url ${VTnorm}";
		print " == ${CSI}41m${VTwhite}tree $config->{'treename'}${VTnorm}"
			if $config->{'treename'};
		print " == ${CSI}41m${VTwhite}all versions in CVS ${VTnorm}\n" ;
		print '    No free-text indexing', "\n";
		print '    Purge              : ', elapsed($purgeend-$purgestart), "\n";
		print '    Definitions parse  : ', elapsed($dclend-$dclstart), "\n";
		print '    References parse   : ', elapsed($refend-$refstart), "\n";
		print '    ...Total duration..: ', elapsed(time()-$starttime), "\n";
		STDERR->autoflush(0);

		if	(	exists($option{'allversions'})
			&&	$option{'allversions'} ne 'noauto'
			&&	$option{'allversions'} ne ' '	# don't consider courtesy value
			) {
			dump_versionset('CVS', \%versionset);
		}

	} else {

#	purgeall() is much faster than a sequence of purge($version);
#	if there is only one version in the range, use it instead of
#	an individual purge($version).
#	In incremental indexing (no --reindexall), every file must
#	later be carefully examined to determined if a very
#	selective DB cleaning is needed.
		my $dopurge = 0;
		my $docareful = 0;
		$reindexmode = 0;
		if (exists($option{'reindexall'})) {
			$reindexmode = 1;
			if	(exists($option{'allversions'})) {
				$purgestart = $starttime;
				$index->saveperformance('', 1 , $milestone, $purgestart, 0);
				print STDERR "\nFull database purge ... ${VTyellow}${VTslow}in progress${VTnorm}\n";
				$index->purgeall();
				$index->saveperformance('', 0 , '', $starttime, 0);	# rewrite erased record
				$purgeend = time();
				$index->saveperformance('', 1 , $milestone, $purgestart, $purgeend);
				print STDERR &VTCUU(1), &VTCHA(25), &VTEL(0), "${VTgreen}Done${VTnorm}\n";
			} else {
				$dopurge = 1
			}
		} else {
			my $vc;
			if	(exists($option{'allversions'})) {
				$index->{'version_count'} =
					$index->{dbh}->prepare
						( 'select count(reindex) from '.$config->{'dbprefix'}.'times'
						. ' where reindex = 1'
						. ' and stepname = \'D\''
						);
				$index->{'version_count'}->execute();
			} else {
				$index->{'version_count'} =
					$index->{dbh}->prepare
						( 'select count(reindex) from '.$config->{'dbprefix'}.'times'
						. ' where reindex = 1'
						. ' and releaseid = ?'
						. ' and stepname = \'D\''
						);
				$index->{'version_count'}->execute($option{'version'});
			}
			($vc) = $index->{'version_count'}->fetchrow_array();
			$index->{'version_count'} = undef;
			if (0 == $vc) {	# initial indexing
				$reindexmode = 1;
			} else {
				$docareful = 1;
			}
		}

		foreach my $version (@versions) {
#MT			$childpid = undef;
			$versioninprogress = $version;
			print STDERR "\n${CSI}44m${VTwhite}Processing $url ${VTnorm}";
			print STDERR " == ${CSI}41m${VTwhite}tree ".$config->{'treename'}.${VTnorm}
				if $config->{'treename'};
			print STDERR " == ${CSI}41m${VTwhite}Version $version ${VTnorm}\n" ;
			$milestone = 'P';
			$purgestart = time();
			$stepstart = $purgestart;
			$index->saveperformance($version, $reindexmode, $milestone, $purgestart, 0);
			if ($dopurge) {
				print STDERR "\nSelective database purge ... ${VTyellow}${VTslow}in progress${VTnorm}\n";
				$index->purge($version);
				print STDERR &VTCUU(1), &VTCHA(30), &VTEL(0), "${VTgreen}Done${VTnorm}\n";
			}
			if ($docareful) {
				cleanindex($version);
			}
			$purgeend = time();
			$index->saveperformance($version, $reindexmode, $milestone, $purgestart, $purgeend);
			$textend = 0;
			if ($files->isa('LXR::Files::Plain')) {
				if ($foundglimpse > 0 || $foundswishe > 0) {
					$milestone = 'T';
					$textstart = time();
					$stepstart = $textstart;
					$index->saveperformance($version, $reindexmode, $milestone, $textstart, 0);
#MT					$childpid =
						gensearch	( $version
#MT									, \&childexit
									);
					$textend = time();
			# ATTENTION: if multi-threading code is reenabled, following line must
			#		be commented out
				$index->saveperformance($version, $reindexmode, 'T', $textstart, $textend);
				} else {
					print STDERR "${VTyellow}Free-text search disabled${VTnorm}\n";
				}
			} else {
				print STDERR "${VTyellow}Free-text search setup suppressed for VCS storage${VTnorm}\n";
			}
			$printdirbanner = 1;
			$milestone = 'D';
			$dclstart = time();
			$stepstart = $dclstart;
			$index->saveperformance($version, $reindexmode, $milestone, $dclstart, 0);
			directorytreetraversal	( \&Tagger::processfile
									, $version
									, ''
									, '/'
									);
			$dclend = time();
			$index->saveperformance($version, $reindexmode, $milestone, $dclstart, $dclend);
			$printdirbanner = 1;
			$milestone = 'U';
			$refstart = time();
			$stepstart = $refstart;
			$index->saveperformance($version, $reindexmode, $milestone, $refstart, 0);
			directorytreetraversal	( \&Tagger::processrefs
									, $version
									, ''
									, '/'
									);
			$refend = time();
			$index->saveperformance($version, $reindexmode, $milestone, $refstart, $refend);

#MT 			if ($childpid > 0) {
#MT 				waitpid($childpid, 0);
#MT 				delete $SIG{'USR1'};
#MT 			}
#MT			if (0 != $textend) {
#MT				$index->saveperformance($version, $reindexmode, 'T', $textstart, $textend);
#MT			}
	# Indexing summary for this version
			print "\n${CSI}44m${VTwhite}Summary for $url ${VTnorm}";
			print " == ${CSI}41m${VTwhite}tree $config->{'treename'}${VTnorm}"
				if $config->{'treename'};
			print " == ${CSI}41m${VTwhite}Version $version ${VTnorm}\n" ;
			print '    Purge              : ', elapsed($purgeend-$purgestart), "\n";
			print '    Free-text indexing : ';
			if (0 == $textend) {
				print $VTyellow, 'skipped', $VTnorm;
			} else {
				print elapsed($textend-$textstart);
			}
			print "\n";
			print '    Definitions parsing: ', elapsed($dclend-$dclstart), "\n";
			print '    References parsing : ', elapsed($refend-$refstart), "\n";
			print '    ...Total duration..: ', elapsed(time()-$purgestart), "\n";
		}
	}
	delete $SIG{__DIE__};
	$SIG{'INT'} = 'DEFAULT';
	$index->{dbh}->do
			( 'delete from '.$config->{'dbprefix'}.'times'
			. ' where releaseid = \'\' and reindex = 0'
			);
	$index->write_close();
	$index->final_cleanup();

	# IMPORTANT REMINDER:
	#	DB has been disconnected, consequently post_processing must not reference the DB
	#	through the DBI/DBM interface.
	if	(	!$option{'novacuum'}
		&&	!($option{'U'} && $config->{'dbname'} =~ m/^dbi:Pg:/)
		) {
		print STDERR "\nDatabase optimisation ... ${VTyellow}${VTslow}in progress${VTnorm}\n";
		$index->post_processing();
		print STDERR &VTCUU(1), &VTCHA(27), &VTEL(0), "${VTgreen}Done${VTnorm}\n";
	}
}


#######################################
###
###               Annex
###
###  Support routines
###
###

sub abortcleanup {
	my $abrtend;
	delete $SIG{__DIE__};	# avoid recursive trap
	$index->saveperformance($versioninprogress, $reindexmode, $milestone, $stepstart, -time());
	$index->saveperformance('', 0, '', $starttime, -time());
#MT 	($textstart, $abrtend) = $index->getperformance($versioninprogress, $reindexmode, 'T');
#MT 	if	(	defined $textstart
#MT 		&&	0 == $abrtend
#MT 		) {
#MT 		$index->saveperformance	( $versioninprogress
#MT 								, $reindexmode
#MT 								, 'T'
#MT 								, $textstart
#MT 								, $textend ? $textend : -time()
#MT 								);
#MT 	}
	$index->write_close();
	$index->final_cleanup();
	die $!;
}

#MT sub childexit {
#MT 	$textend = time();
#MT 	delete $SIG{'USR1'};
#MT }

sub dirbannerprint {
	my ($head, $releaseid, $dirname, $filename) = @_;


	if ($printdirbanner) {
		print(STDERR "${VTmagenta}$head $releaseid $dirname");
		$printdirbanner = undef;
	} else {
		print(STDERR
				  &VTCUU(1)
				, &VTCHA(3 + length($head) + length($releaseid) + length($dirname))
				, &VTEL(0)
				, ${VTmagenta}
				)
	}
	$repeatbannercountdown = $repeatbannerevery;
	print(STDERR "$filename${VTnorm}\n");
}

sub directorytreetraversal {
	my ($process_sub, $releaseid, $dirname, $filename) = @_;
	my $pathname = $dirname . $filename;

	if (substr($filename, -1) eq '/') {
		dirbannerprint('***', $releaseid, $dirname, $filename) if $trace;
		my $needbanner;
		map {	my $node = $_;
				my $type = substr($node, -1);
				$needbanner //= $type eq '/';
				if	(	$type ne '/'
					&&	$needbanner
					) {
					$needbanner = undef;
					dirbannerprint('***', $releaseid, $dirname, $filename) if $trace;
				}
				directorytreetraversal	( $process_sub
										, $releaseid
										, $pathname
										, $_
										);
			} $files->getdir($pathname, $releaseid);
		$index->forcecommit();
	} elsif (!exists $binaryfiles{$releaseid}{$pathname}) {
		my $didprocess;
		if	($autoversionflag) {
		# Some 'Files' objects need this variable properly set to
		# determine the possible versions for a file,
		# in particular to return correct values for varrange sub.
			$LXR::Common::pathname = $pathname;
			my @versions = $config->varrange('v');
			foreach my $releaseid (@versions) {
				if ($repeatbannercountdown <=0) {
					$printdirbanner = 1;
					dirbannerprint('**=', $releaseid, $dirname, '') if $trace;
				}
				if (1 == $autoversionflag) {		# Only in first pass
					$versionset{$releaseid} = '';	# remember this version
				}
				my $didoneprocess = &$process_sub($pathname, $releaseid, $config, $files, $index, $trace);
				if ($didoneprocess) {
					$repeatbannercountdown--;
				} else {
					$binaryfiles{releaseid}{$pathname} = 1;
				}
				$didprocess //= $didoneprocess;
			}
		} else {
			if ($repeatbannercountdown <=0) {
				$printdirbanner = 1;
				dirbannerprint('**=', $releaseid, $dirname, '') if $trace;
			}
			$didprocess = &$process_sub($pathname, $releaseid, $config, $files, $index, $trace);
			$repeatbannercountdown-- if $didprocess;
		}
		$printdirbanner //= $didprocess;
	}
}

sub feedswish {
	my ($pathname, $releaseid, $swish, $filelist) = @_;

	if (substr($pathname, -1) eq '/') {
		print STDERR "&&& $pathname $releaseid \n" if $trace;
		map { feedswish($pathname . $_, $releaseid, $swish, $filelist) }
		  $files->getdir($pathname, $releaseid);
	} else {
		if (my $fh = $files->getfilehandle($pathname, $releaseid)) {
			if	(	$files->getfilesize($pathname, $releaseid) > 0
				&&	LXR::Lang::parseable($pathname, $releaseid)
				) {
				print STDERR "&&> $pathname $releaseid \n" if $trace;
				print $filelist "$pathname\n";
				my $contents = $files->getfile($pathname, $releaseid);
				$swish->print
					( "Path-Name: $pathname\n"
					, 'Content-Length: ' . length($contents) . "\n"
					, "Document-Type: TXT\n"
					, "\n", $contents
					);
			} else {
				$binaryfiles{$releaseid}{$pathname} = 1;
			}
			close($fh);
		}
	}
}

sub gensearch {
	my $releaseid = shift;
#MT	my $cldhandler = shift;

#MT # Since using DBI in multi-threading is very hard to get it right,
#MT # it is easier to temporarily close the connection to the DB and
#MT # reopen it later when we really need it.
#MT	$index->write_close();
#MT	$index->final_cleanup();
#MT	my $pid;
#MT	my $parentpid = $$;
#MT	$pid = fork() if !$option{'S'};
#MT	if (defined $pid) {
#MT		if (0 != $pid) {
#MT			$SIG{'USR1'} = $cldhandler;
#MT		# This is the parent: restore DB connection
#MT			$index = LXR::Index->new($config);
#MT			$index->write_open();
#MT			return $pid ;
#MT		}
#MT		# Remove the signal handlers because DB connection is down
#MT		delete $SIG{__DIE__};
#MT		$SIG{'INT'} = 'DEFAULT';
#MT	} else {
#MT		# We did not fork, reopen DB connection
#MT		$index = LXR::Index->new($config);
#MT		$index->write_open();
#MT	}


# In case we did not fork, continue with traditional sequential processing

	if ($config->{'glimpsedir'} && $config->{'glimpseindex'}) {

		# Canonize options
		my $glixopts;
		if (exists($config->{'glimpseindexopts'})) {
			$glixopts = $config->{'glimpseindexopts'};
		} else {
			$glixopts = '-o -n -B';	# small index, numbers, large hashing
		};
		$glixopts =~ s/-+/-/g;		# make sure a single - at beginning
		$glixopts =~ s/-[RIFfa]//g;	# remove unwanted or offending options
		$glixopts =~ s/-( |$)//g;	# remove orphan dashes
		$glixopts =~ s/ +/ /g;		# merge spaces
		if ($glixopts =~ m/^\s*$/) {
			$glixopts = '-o -n -B';
		}
		$glixopts =~ s/^-*/-/;

		# Determine indexation mode: full or incremental

		my $indexdir = $config->{'glimpsedir'} . '/' . $releaseid;
		my $indextmp = $config->{'glimpsedir'} . '/%@%glix%@%/';
		remove_tree($indextmp);
		if (! exists($option{'reindexall'})) {
			$glixopts .= ' -f';
			system('cp', '-r', $indexdir, $indextmp);
		} else {
			make_path($indextmp, {mode => 0755});
			if (-e $indexdir.'.glimpse_exclude') {
				system('cp', $indexdir.'.glimpse_exclude', $indextmp);
			}
		}

		# Create the exclusion file only if it does not exist
		my $exclude = $indextmp . '.glimpse_exclude';
		if	(	exists($config->{'ignoredirs'})
			&&	!-e $exclude
			) {
			if (open (EXCLUDE, '>', $exclude)) {
				foreach (@{$config->{'ignoredirs'}}) {
					print EXCLUDE '/', $_, "/\n"
				}
				close(EXCLUDE);
			} else {
				print STDERR $VTred , "Can't create "
					, $VTnorm, $VTbold, $exclude
					, $VTnorm, "\n"
					, $VTyellow, 'No automatic directory exclusion from parameter'
					, $VTnorm, $VTbold, "'ignoredirs'"
					, $VTnorm, "\n";
			}
		}

		# Do it now
		system	( $config->{'glimpseindex'}
				, split(' ', $glixopts)
				, '-H', $indextmp
				, $config->{'sourceroot'} . '/' . $releaseid
				);

		# Need to chmod the glimpse files so everybody can read them.
		system('chmod 644 '. $indextmp . '.glimpse*');
		print 'Permissions changed to rw-r--r--', "\n";

		# Permute indexes
		my $del_locn = $config->{'glimpsedir'}.'/%@%delete%@%me%@%/';
		system('mv', $indexdir, $del_locn);
		system('mv', $indextmp, $indexdir);
		remove_tree($del_locn);
	}

	if ($config->{'swishdir'} && $config->{'swishbin'}) {
		my $swish = IO::Handle->new();
		die ${VTred} . $config->{'swishdir'} . " does not exist${VTnorm}"
			unless -d $config->{'swishdir'};
		my $filelist = IO::File->new($config->{'swishdir'} . "/$releaseid.filenames", 'w')
		  or die "${VTred}can't open $releaseid.filenames for writing${VTnorm}";

		# execute swish, as a pipe we can write to

		open( $swish
			, '|' . $config->{'swishbin'}
			  . ' -S prog -i stdin -v 1 -c '.$config->{'swishconf'}
			  . ' -f '.$config->{'swishdir'}.'/'.$releaseid.'.index'
			)
		  or die ${VTred} . "Couldn't exec " . $config->{'swishbin'} . ":${VTnorm $!}\n";

		feedswish('/', $releaseid, $swish, $filelist);

		$swish->close();
		$filelist->close();
	}

	print STDERR "\n";
#MT	if (defined $pid) {
#MT		kill(10, $parentpid);	# 10 = POSIX::SIGUSR1
#MT		exit(0) ;
#MT	}
#MT	return $pid;
}

sub dump_versionset {
	my ($prefix, $versionset) = @_;
	my $vfh;

	my $treeid = $config->{'virtroot'} . '_' . $config->{'treename'};
	$treeid =~ s|([^-a-zA-Z0-9.\@_])|sprintf('%%%02X', ord($1))|ge;
	my $versionfile = 'custom.d/'.$prefix.$treeid;
	if (!open($vfh, '>', $versionfile)) {
		print "${VTyellow}Can't open : version set not saved${VTnorm}\n";
		return;
	}
	my $count = 0;
	foreach my $version (sort keys %$versionset) {
		$count++;
		print $vfh $version, "\n";
	}
	close($vfh);
	print "=== $count versions written to ${VTyellow}$versionfile${VTnorm}\n";
}

sub elapsed {
	my $time = shift;

	my $seconds = $time % 60;
	$time = ($time - $seconds) / 60;
	my $minutes = $time %60;
	return ($time-$minutes)/60 . ':' . sprintf('%2.2d:%2.2d', $minutes, $seconds);
}

#	Look at each file recorded in the DB for this version
#	and check if it has changed.
#	A filename+release is translated into a revision id.
#	Note that deleted/moved files will return undef.
#	The revision id is compared to the recorded revision.
#	If they do not match, all information pertaining to
#	the recorded revision is erased.
#
#	Since the candidate files are more frequently replaced
#	than deleted, symbols are not erased when their reference
#	counts decrement to zero because the new file version will
#	very likely reuse these symbols. Definitions and references
#	are always erased.
#	There is a small penalty for non-reused symbols, but this is
#	fixed on next reindexall.
sub cleanindex {
	my $releaseid = shift;
	my @files;		# Files from the DB for this release
	my $dirname;
	my $filename;

	$index->getallfilesinit($releaseid);
	while (my ($fid, $pathname, $revision, $relcount) = $index->nextfile()) {
		next if $files->filerev($pathname, $releaseid) eq $revision;
		$pathname =~ m!(.*/)(.+)$!;
		$filename = $2;
		if ($dirname ne $1) {
			$dirname = $1;
			print STDERR "${VTmagenta}%%% $releaseid $dirname${VTnorm}\n";
		}
		print STDERR "--- $releaseid $filename $revision";
		print STDERR " ... ${VTyellow}${VTslow}cleaning${VTnorm}";
		print STDERR VTCUB(12);
#		$index->emptycache();
		if ($relcount > 1) {
			print STDERR VTEL(0), "${VTred}not purgeable yet${VTnorm}\n";
		} else {
			$index->purgefile($fid, $releaseid);
			print STDERR VTEL(0), "${VTyellow}purged${VTnorm}\n";
		}
		$index->removerelease($fid, $releaseid);
		$index->forcecommit();
	}
}