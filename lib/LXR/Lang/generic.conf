# -*- mode: perl, tab-width: 2 -*- 
# Configure options for the generic language support

{
 # Options to always feed to ectags
 'ectagsopts' => ["--c-types=+px", "--eiffel-types=+l", 
				  "--fortran-types=+L",],

 # How to map a language name to the ectags language-force name
 # if there is no mapping, then the language name is used
 'eclangnamemapping' => {'C' => 'c',
						 'C++' => 'c++',
						 'Python' => 'python',
						},
								

 # lang map specifies info for each language
 # what the reserved words & comment chars are
 'langmap' => {
			   'C' => {
					   'reserved' => [
									  'auto', 'break', 'case', 'char', 'const',
									  'continue', 'default', 'do', 'double',
									  'else', 'enum', 'extern', 'float', 'for',
									  'goto', 'if', 'int', 'long', 'register',
									  'return', 'short', 'signed', 'sizeof',
									  'static', 'struct', 'switch', 'typedef',
									  'union', 'unsigned', 'void', 'volatile',
									  'while',
									 ],

					   'spec' => ['atom',     '\\\\.',	    '',
								  'comment',  '/\*',		'\*/',
								  'comment',  '//',		    "\$",
								  'string',   '"',		    '"',
								  'string',   "'",		    "'",
								  'include',  '#\s*include',	"\$"],
					  },
		
			   'C++' => {
						 'reserved' => ['and', 'and_eq', 'asm', 'auto', 'bitand',
										'bitor', 'bool', 'break', 'case', 'catch',
										'char', 'class', 'const', 'const_cast',
										'continue', 'default', 'delete', 'do',
										'double', 'dynamic_cast', 'else', 'enum',
										'explicit', 'export', 'extern', 'false',
										'float', 'for', 'friend', 'goto', 'if',
										'inline', 'int', 'long', 'mutable',
										'namespace', 'new', 'not', 'not_eq',
										'operator', 'or', 'or_eq', 'private',
										'protected', 'public', 'register',
										'reinterpret_cast', 'return', 'short',
										'signed', 'sizeof', 'static',
										'static_cast','struct', 'switch',
										'template','this', 'throw', 'true','try',
										'typedef', 'typeid','typename',
										'union', 'unsigned','using',
										'virtual', 'void','volatile',
										'wchar_t', 'while','xor',
										'xor_eq'],

						 'spec' => ['atom',     '\\\\.',	    '',
								  'comment',  '/\*',		'\*/',
								  'comment',  '//',		    "\$",
								  'string',   '"',		    '"',
								  'string',   "'",		    "'",
									'include',  '#\s*include',	"\$"],
						},
		
			   'Java' => {
						  'reserved' => ['break', 'case', 'continue', 'default',
										 'do', 'else', 'for', 'goto', 'if',
										 'return', 'static', 'switch', 'void',
										 'volatile', 'while', 'public', 'class',
										 'final', 'private', 'protected',
										 'synchronized', 'package', 'import',
										 'boolean', 'byte', 'new', 'abstract',
										 'extends', 'implements', 'interface',
										 'throws', 'instanceof', 'super', 'this',
										 'native', 'null'],

						  'spec' => ['atom'	   => ('\\\\.',	''),
									 'comment' => ('/\*',		'\*/'),
									 'comment' => ('//',		"\$"),
									 'string'  => ('"',		'"'),
									 'string'  => ("'",		"'"),
									 'include' => ('import',	"\$"),
									 'include' => ('package', "\$"),
									],
						  
						 },
			   
			   'Fortran' => {
							 'reserved' => [],
							},
		
			   'Pascal' => {
							'reserved' => [],
						   },
		
			   'COBOL' => { 
						   'reserved' => [],
						  },
			   'Perl' => {
						  'reserved' => [
										 'sub',
										],
						  'spec' => ['atom'		=> ('\$\W?',	''),
									 'atom'		=> ('\\\\.',	''),
									 'include'	=> ('\buse\s+',	';'),
									 'include'	=> ('\brequire\s+',	';'),
									 'string'	=> ('"',		'"'),
									 'comment'	=> ('#',		"\$"),
									 'comment'	=> ("^=\\w+",	"^=cut"),
									 'string'	=> ("'",		"'")],

						 },
			   'Python' => {
							'reserved' => ['def','print','del','pass',
										   'break','continue','return',
										   'raise','import','from',
										   'global','exec','assert',
										   'if','elif','else','while',
										   'for','try','except','finally',
										   'class','as','import','or',
										   'and','is','in','for','if',
										   'not','lambda','self',
										  ],
							
							'spec' => ['comment'	=> ('#',		"\$"),
									   'string'	=> ('"',		'"'),
									   'string'	=> ("'",		"'"),
									   'atom'		=> ('\\\\.',	'')],
						   },
			   'php' => {
						 'reserved' => ['and','$argv','$argc','break','case','class',
										'continue','default','do','die','echo','else',
										'elseif','empty','endfor','endforeach','endif',
										'endswitch','endwhile','E_ALL','E_PARSE','E_ERROR',
										'E_WARNING','exit','extends','FALSE','for','foreach',
										'function','HTTP_COOKIE_VARS','HTTP_GET_VARS',
										'HTTP_POST_VARS','HTTP_POST_FILES','HTTP_ENV_VARS',
										'HTTP_SERVER_VARS','if','global','list','new','not',
										'NULL','or','parent','PHP_OS','PHP_SELF','PHP_VERSION',
										'print','return','static','switch','stdClass',
										'this','TRUE','var','xor','virtual','while','__FILE__',
										'__LINE__','__sleep','__wakeup',
									   ],

						 'spec' => ['comment',  '/\*',       '\*/',
									'comment',  '//',            "\$",
									'comment',  '#',             "\$",
									'string',   '"',             '"',
									'string',   "'",             "'",
									'include',  'require',      "\$",
									'include',  'include',      "\$",
									'include',  'require_once', "\$",
									'include',  'include_once', "\$"
								   ],
						},
			  }
}
