# -*- mode: perl -*-
# LXR master configuration file
#
#-	$Id: lxr.conf,v 1.53 2012/09/22 09:23:34 ajlittoz Exp $
#-
#-
#-	This configuration file is fully configured by script
#-	configure-lxr.pl (along with all other files).
#-
#-	Though it remains somehow compatible with prior versions
#-	multi-step installation method (preconfiguration by script
#-	initial-config.sh followed by manual editing),
#-	the interactive "macro" directives interspersed through
#-	the text nearly prohibit easy editing of this file:
#-	this needs a full understanding of the directives to be
#-	able to get rid of them.
#-

(
		################################
		# Global configuration section #
		################################

	{
		# Auxiliary tools subsection #
		#============================#
#@V Configuring auxiliary tool paths

		#- Place where lxr can write temporary files
	  'tmpdir' => '/tmp'

		#- Define this OR the swish-e variable depending which search engine you want to use.
		#- Path to glimpse executables.
		#- e.g.: , 'glimpsebin'   => '/usr/local/bin/glimpse'
#@U	, 'glimpsebin'     => '%glimpse%'
#@U	, 'glimpseindex'   => '%glimpseindex%'
#@U	, 'glimpsedirbase' => '%glimpsedirbase%'
		#- Location of SWISH-E binary
		#- e.g.: , 'swishbin' => '/usr/local/bin/swish-e'
#@U	, 'swishbin'     => '%swish%'
#@U	, 'swishdirbase' => '%swishdirbase%'
		#- Location of the SWISH-E.conf file
	, 'swishconf' => '%LXRroot%/templates/swish-e.conf'

		#- Path to Exuberant Ctags executable
	, 'ectagsbin' => '%ctags%'
		#- Location of the ectags.conf file
	, 'ectagsconf' => '%LXRroot%/templates/ectags.conf'

		#- Paths for CVS module
	, 'cvspath' => '/bin:/usr/local/bin:/usr/bin:/usr/sbin'

		# Computer DNS names subsection #
		#================================
#@V Configuring host name or IP (as http://...)
#@Q --- Host name?; -2
#@A	, 'host_names' =>	[ '@A'
#@QR --- Alias name ? (hit return to stop); -3
#@A						, '@A'
#-						, //localhost
#-						, https://192.168.1.1
#-						, 'http://mycomputer.outside.domain:12345'
						]

		# HTML subsection #
		#=================#
#@V Configuring HTML parameters

		# All paths in this subsection are relative to LXR root directory

		# Templates used for headers and footers
	, 'htmlfatal'		=> 'templates/html/html-fatal.html'
	, 'htmlhead'		=> 'templates/html/html-head.html'
	, 'htmltail'		=> 'templates/html/html-tail.html'
	, 'htmldir'			=> 'templates/html/html-dir.html'
	, 'htmlident'		=> 'templates/html/html-ident.html'
	, 'htmlsearch'		=> 'templates/html/html-search-%search_engine%.html'
	, 'htmlconfig'		=> 'templates/html/html-config.html'

		# htmlhead and htmltail can be customised for the various
		# LXR operations. Just replace html by source (listing file),
		# sourcedir (displaying directory), diff (difference markup),
		# ident (identifier search), search (free-text search)
		# as below (which changes nothing):
#	, 'sourcehead'		=> 'templates/html/html-head.html'
#	, 'sourcedirhead'	=> 'templates/html/html-head.html'

		# showconfig script is a bit special since "version" has
		# no meaning for it. Better to wipe out the 'variables' selection
		# links with an adequate header:
	, 'showconfighead'		=> 'templates/html/config-head-btn-smaller.html'

		# Default character width of left version (for diff)
	, 'diffleftwidth'	=> 50

		# Default identifier search constraint (for ident)
#	, 'identdefonly'	=> 1

		# CSS style sheet
	, 'stylesheet'		=> 'templates/lxr.css'
	, 'alternate_stylesheet' => [ 'templates/classic.css' ]

		# Default character encoding
	, 'encoding'	=> 'utf-8'

		# File management subsection #
		#============================#
#@V Configuring file subsection

		# Which extensions to treat as images when browsing.  If a file is an image,
		# it is displayed.
	, 'graphicfile' =>
		'bitmap|bmp|gif|icon?|jp2|jpe?g|pjpe?g|png|svg|tiff?|xbm|xpm'

		# Which file extensions are associated with which icon
		# Below is an example using 'Oxygen' theme available with KDE
		# small-icons/ is a symbolic link to
		#		 /usr/share/icons/oxygen/22x22/mimetypes/
		# (This location is valid for Fedora distributions,
		# check for others)
# 	, 'iconfolder' => 'small-icons/'
		# Don't forget the final / above.
# 	, 'icons' =>
# 		{	'c|pc'				=> 'text-x-csrc.png'
# 		,	'h|hh'				=> 'text-x-chdr.png'
# 		,	'c\+\+|cc|cpp|cxx'	=> 'text-x-c++src.png'
# 		,	'hpp|hxx|h\+\+'		=> 'text-x-c++hdr.png'
# 		,	'java'				=> 'text-x-java.png'
# 		,	'js'				=> 'application-x-javascript.png'
# 		,	'pl|pm|perl'		=> 'application-x-perl.png'
# 		,	'php|php3|phtml'	=> 'application-x-php.png'
# 		,	'py|python'			=> 'text-x-python.png'
# 		,	'sh|bsh|bash|ksh|zsh' => 'text-x-script.png'
# 		,	's?html?'			=> 'text-html.png'
# 		,	'css'				=> 'text-css.png'
# 		,	'pdf'				=> 'application-pdf.png'
# 		,	'txt'				=> 'text-plain.png'
# 		,	'p|pas'				=> 'text-x-pascal.png'
# 		,	'patch'				=> 'text-x-patch.png'
# 		,	'sql'				=> 'text-x-sql.png'
# 		,	'rb'				=> 'application-x-ruby.png'
# 		,	'ui'				=> 'text-xml.png'
# 		,	'.*\~'				=> 'application-x-trash'
# 		}
# 	, 'graphicicon' => 'image-x-generic.png'
# 	, 'defaulticon' => 'unknown.png'
# 	, 'diricon' => 'inode-directory.png'

		#- How to map files to languages
	, 'filetypeconf' => '%LXRroot%/templates/filetype.conf'

		#- Location of the Generic.pm config file
	, 'genericconf' => '%LXRroot%/lib/LXR/Lang/generic.conf'

		# "Common factor" subsection #
		#============================#
#@V Configuring "common factors"

		# In case your LXR installation controls several trees,
		# put here what you consider common parameters between
		# your source trees.
		# A parameter is "common" if its value must be simultaneously
		# adjusted in every tree.

		# Pattern for extracting tree name from URL, since all
		# trees are usually served from the same physical server.
	, 'treeextract' => '([^/]*)/[^/]*$'

#@begin_O	nodbuser
		# User name and password for DB access can be the same,
		# even if the database name is tree-specific.
#	, 'dbuser'		=> 'lxr'
#	, 'dbpass'		=> 'lxrpw'
#@end_O		nodbuser
#@begin_O	dbuser
	, 'dbuser'		=> '%DB_user%'
	, 'dbpass'		=> '%DB_password%'
#@end_O		dbuser
#@begin_O	nodbprefix
		# Table prefix is also a common parameter
		# unless you stuff all tree data in a single database.
		# It has a default hard-coded value:
#	, 'dbprefix'	=> 'lxr_'
#@end_O		nodbprefix
#@begin_O	dbprefix
	, 'dbprefix'	=> '%DB_global_prefix%'
#@end_O		dbprefix
	}

# ------------------------------------------------------------------------

		###############################
		# Tree configuration sections #
		###############################

#@V Marking tree section
#@begin_tree
# ------------------------------------------------------------------------
,	{

		# Server configuration subsection #
		#=================================#
#@V Configuring LXR server parameters
		#-
		#- NOTE --------------------------------------------------- #
		#- ---- 'baseurl' and 'baseurl_aliases' are deprecated ---- #
		#- ---- in favor of 'host_names'.                      ---- #
		#- ---- See "Global configuration section"             ---- #
		#- ----                                                ---- #
		#- ---- 'host_names' takes precedence if 'baseurl' is  ---- #
		#- ---- also defined.                                  ---- #
		#- ----                                                ---- #
		#- ---- Support for 'baseurl' is maintained for        ---- #
		#- ---- compatibility with existing LXRs.              ---- #
		#- ----                                                ---- #
		#- Configuration for http://192.168.1.1/lxr.
		#- baseurl is used to select configuration block.
#- 	  'baseurl' => 'http://192.168.1.1/lxr'    # Put your URL here
#- 		     # baseurl_aliases allows other URLs to be used to reach the site
#- 		     # comment this out if you do not want any aliases
#- 	, 'baseurl_aliases' =>
#- 			[ 'http://localhost/lxr'
#- 			, 'http://mydomain/lxr'
#- 			]
		#- ----                                                ---- #
		#- ----        End of deprecated parameters            ---- #
		#- ---- If you use them, uncomment the comma below     ---- #
		#- -------------------------------------------------------- #
#-	,

#@V The virtual root is the fixed URL part after the hostname.
#@begin_O	context==s
#@Q --- Virtual root? (i.e. URL part after host); -1; ; /lxr
#@end_O		context==s
#@begin_O	context==m
#@Q --- Virtual root? (e.g. /lxr/something); -2
#@end_O		context==m
#- The following @D allows automatic transfer of 'virtroot'
#- into lighttpd-lxrserver.conf.
#@D virtroot=@A
#@A	  'virtroot'    => '@A'

		#- Title for this tree to display in page header area
		#- if you aren't satisfied with the default
#@Q --- Caption in page header? (e.g. Project XYZZY displayed by LXR); -2
#@A	, 'caption' => '@A'
#@begin_O	context!=m
		# Button title to switch to this tree when multiple
		# trees are managed by LXR
#	, 'shortcaption' => 'Tree'
#@end_O		context!=m
#@begin_O	context==m
#@begin_Y Do you want a speed switch button for this tree ?; 1; yes, no; Y, N
#@Q --- Short title for button? (e.g. XYZZY); -2
#@A	, 'shortcaption' => '@A'
#@end_Y
#@end_O		context==m
#@begin_Y Do you need a specific encoding for this tree ?; 2; yes, no; Y, N

#@Q --- Encoding name? (e.g. iso-8859-1); -2
		# Character encoding (overrides default)
#@A	, 'encoding'	=> '@A'
#@end_Y

		# a link of the form (prefix)($filepath)(postfix) is generated when viewing a file
		#   example for cvsweb:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/cvsweb.cgi'
#	, 'cvswebpostfix' => '?cvsroot=rootname'
		#   example for viewcvs:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/viewcvs.cgi/myroot'
#	, 'cvswebpostfix' => ''

		# Tree location subsection #
		#==========================#
#@V Describing tree location

		# sourceroot - where to get the source files from
#@begin_C How is your tree stored?; 1; files, cvs, git, svn, bitkeeper; F,C,G,S,B
#@case_C F

		#- For ordinary directories, this specifies a directory which has each version as a
		#- subdirectory e.g.
		#-  project-tree/version1/...
		#-  project-tree/version2/...
		#- The names of the version directories must match the values for the Version
		#- variable (see the version selection subsection).
#@V A source directory contains one sub-directory for every version.
#@Q --- Source directory? (e.g. /home/myself/project-tree); -2
#@A	, 'sourceroot' => '@A'
#@case_C C

		#- This specifies a CVS repository by setting the value to "cvs:"
		#- followed by the path to the repository.  Note this must be file accessible - remote
		#- server access does NOT work.
#@V A CVS repository is a directory containing ,v files
#@Q --- CVS repository? (e.g. /home/myself/project-CVS); -2
#@A	, 'sourceroot' => 'cvs:@A'
#@case_C G

		#- For a GIT repository, the 'sourceroot' config variable points to the directory
		#- in which you find the `objects', `refs', `index' etc.
		#- directories.
#@V A Git repository is a directory containing objects, refs, index, ... subdirectories.
#@V It is usually named .git in some user directory and is thus not visible.
#@Q --- Git repository? (e.g. /home/myself/project-git/.git); -2
#@D GITrepo=@A
#@A	, 'sourceroot' => 'git:@A'
	, 'sourceparams' =>
#@Q --- display revision-ids?; 1; yes,no; 1,0
#@A		{ 'git_annotations'	=> @A
#@Q --- display revision author name?; 1; yes,no; 1,0
#@A		, 'git_blame'		=> @A
		}
#@case_C S

		#- For a Subversion repository, specify svn: followed by the path to the
		#- repository.  Presently, the implementation is limited to
		#- local (file-accessible) repositories.
#@V A Subversion repository is a directory containing a database for
#@V the source-tree. The present backend implementation in LXR limits
#@V access to local repositories.
#@Q --- Subversion repository? (e.g. /home/myself/project-svn); -2
#@A	, 'sourceroot' => 'svn:@A'
	, 'sourceparams' =>
#@Q --- display revision-ids?; 1; yes,no; 1,0
#@A		{ 'svn_annotations'	=> @A
#@Q --- display revision author name?; 1; yes,no; 1,0
#@A		, 'svn_blame'		=> @A
		}
#@case_C B

		#- For a BitKeeper repository, specify bk: followed by the path to the
		#- repository.  For BK it is also necessary to specify a 'cachepath' parameter in
		#- the 'sourceparams' value below.  This should point to a directory where the
		#- code can write and read files.
#@V BitKeeper is proprietary software. The BK management routines are more or less
#@V in their 2005 state. This interface has not been tested for many years.
#@V There is absolutely no guarantee on BK operation.
#@Q --- BK repository? (e.g. /home/myself/project-BK); -2
#@A	, 'sourceroot' => 'cvs:@A'
#@V BK needs a read/write temporary directory.
#@Q --- BK temporary directory? (e.g. /home/myself/BKtemp); -2
	, 'sourceparams' =>
#@A		{ 'cachepath'	=> '@A' }
#@end_C

#		# The string to display as the base part of every path in the tree
#-	, 'sourcerootname' => 'Example'
#-		# Or if you want automatic version insertion
#-	, 'sourcerootname' => '$v'
#@Q Name to display for the path root? (e.g. Project or $v for version); -1; ; $v
#@A	, 'sourcerootname' => '@A'
		#-
		#- Any parameters to the source access method should be specified below.
		#-
		#- BK:	'cachepath' is used for temporary files
		#- GIT:	if 'git_annotations' is non-zero, the file revision that
		#-		introduced each line is displayed.
		#-	'git_blame' will add the author of each line to the
		#-		output. Keep in mind that the core LXR code
		#-		will only request author information if
		#-		annotations are switched on, too!
		#- svn:	if 'svn_annotations' is non-zero, the file revision that
		#-		introduced each line is displayed.
		#-	'svn_blame' will add the author of each line to the
		#-		output. Keep in mind that the core LXR code
		#-		will only request author information if
		#-		annotations are switched on, too!
		#-
#-	, 'sourceparams' =>
#-			{ 'cachepath'	=> '/a/path/here'
#-			, 'git_annotations'	=> 1
#-			, 'git_blame'		=> 1
#-			, 'svn_annotations'	=> 1
#-			, 'svn_blame'		=> 1
#-			}

		# Version selection subsection #
		#==============================#
#@V Enumerating versions

	, 'variables' =>

			# Define typed variable "v".
		{ 'v' =>
#@Q Label for version selection menu? ; -1; ; Version
#@A			{ 'name' => '@A'
				# This is the list of versions to index.
#@V Versions can be explicitly enumerated, be read from a file or computed
#@V by a function. The latter case is recommended for VCS-stored trees.
#@begin_C Version enumeration method?; 1; list, file, function; L,R,F
				#- This can come from a file, a function or be explicitly
				#- ennumerated.
#@case_C R
				#- From a file:
		#	, 'range' => [ readfile('src/versions') ]
#@Q --- Version file? (absolute path or relative to LXR root dir.); -2
#@A			, 'range' => [ readfile('@A') ]
				# The default version to display
				# If not specified, first in 'range' used
#@V By default, first version in list is displayed. You may also indicate
#@V a prefered version.
#@begin_C	--- Default displayed version is first in 'range'?; 1; yes,no; Y,N
#@case_C	N
#@Q --- Default version name?; -2
#@A			, 'default' => '@A'
#@case_C	Y
				# The default version to display
				# If not specified, first in 'range' used
#			, 'default' => 'v3.1'
#@end_C
#@case_C L
				#- Explicitly:
		#	, 'range' => [qw(v1 v2 v3.1 v4 experimental)]
			, 'range' => [qw(
#@QR --- Version name? (hit return to stop); -3
#@A					@A
						)]
#@V By default, first version in list is displayed. You may also indicate
#@V a prefered version.
#@begin_C	--- Default displayed version is first in 'range'?; 1; yes,no; Y,N
#@case_C	N
#@Q --- Default version name?; -2
#@A			, 'default' => '@A'
#@case_C	Y
				# The default version to display
				# If not specified, first in 'range' used
#			, 'default' => 'v3.1'
#@end_C
#@case_C F
				#- If files within a tree can have different versions,
				#- e.g in a CVS tree, 'range' can be specified as a
				#- function to call for each file:
#@V This template contains generic nearly-all-purpose functions.
#@V Since designing such a function is not a trivial exercise,
#@V you'd better choose an available one. You can later refine it
#@V to fit your needs.
#@begin_C --- Generic or custom function?; 0; files, CVS, Git, svn, custom; F,C,G,S,U
#@case_C	F
				#- Automatically collects the version names
				#- in 'sourceroot' directory which are sorted in
				#- lexicographic order (this may not meet the
				#- usual "semantic" order if version name is
				#- made of numbers).
				#-
			, 'range' => sub
				{	opendir (my $dh, $LXR::Common::config->{'sourceroot'})
					|| die "can't open source root directory: $!";
					my @dirs = grep
								{  /^[^.]/
								&& -d "$LXR::Common::config->{'sourceroot'}/$_"
								}
								readdir($dh);
					closedir($dh);
					return(sort @dirs);
				}
#@V With a function, you MUST indicate a default version.
#@Q --- Default version name?; -1; ; head
#@A			, 'default' => '@A'
#@case_C	C
				#- Get the releases and revisions from CVS control data.
				#- Revisions may not be meaningful since their numbers
				#- are not synchronised between files.
				#- If they give too much semantic "noise", comment out
				#- the line requesting them.
				#-
			, 'range' => sub
				{
		##### The following #U lines may be uncommented if you prefer
		##### the static list gathered by ./genxref --allversions
		#U			my $vfn = $LXR::Common::config->{'virtroot'};
		#U			$vfn =~ s|([^-a-zA-Z0-9.\@_])|sprintf("%%%02X", ord($1))|ge;
		#U			$vfn = 'custom.d/CVS' . $vfn;
		#U			if (-f $vfn) {
		#U				return readfile($vfn);
		#U			} else {
						return	# grep {/(release|head)/}
						( $files->allreleases($LXR::Common::pathname)
						, $files->allrevisions($LXR::Common::pathname)
						)
		#U			}
				}
#@V With a function, you MUST indicate a default version.
#@Q --- Default version name?; -1; ; head
#@A			, 'default' => '@A'
#@case_C	G
				#- When using a GIT repo, you can use its tags
				#- to create a list of versions. As an extra
				#- bonus, with the Linux::KernelSort Perl module,
				#- you can properly sort kernel versions. Just
				#- leave it off for generic projects.
				#-
			, 'range' => sub
				{ my $some_dir;
		##### You can comment out one of the following blocks
		##### if you want to limit the set of versions
				  $some_dir = "%GITrepo%/refs/tags";
				  opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				  my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				  closedir DIR;
		##### Add more
				  $some_dir = "%GITrepo%/refs/heads";
				  opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				  my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				  closedir DIR;
		##### End of enumeration
				  unshift (@files, "HEAD");
				  return sort @files;
				}
				#
				#	Advanced example for Linus's upstream
				#	linux-2.6 kernel repository:
				#	'range' => sub
				#		{
				#			use Linux::KernelSort;
				#			my $kernel = new Linux::KernelSort;
				#
				#			my $some_dir = "/path/to/linux-2.6/.git/refs/tags";
				#			opendir (DIR, $some_dir) || die "cannot opendir $some_dir: $!";
				#			my @files = grep { -f "$some_dir/$_" } readdir (DIR);
				#			closedir DIR;
				#		# Linus's tags all have a leading "v"
				#		# which we must cut off for sorting
				#		# add again afterwards.
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^v//;
				#			}
				#			@files = $kernel->sort (@files);
				#			for (my $i = 0; $i < scalar (@files); $i++)
				#			{
				#				$files[$i] =~ s/^/v/;
				#			}
				#
				#			return @files;
				#		}
#@V With a function, you MUST indicate a default version.
#@Q --- Default version name?; -1; ; HEAD
#@A			, 'default' => '@A'
#@case_C	S
				#- Get the revisions from Subversion control data.
				#- Revisions may not be meaningful since their numbers
				#- increment sequentially on every commit.
				#- Latest revision on branches and tags may be more
				#- meaningful.
				#-
			, 'range' => sub
				{
						return	grep {defined}
		##### You may comment some of the following lines to limit the
		##### number of displayed revisions, provided at least one is
		##### left active.
						( $files->allreleases($LXR::Common::pathname)
						, $files->allbranches($LXR::Common::pathname)
						, $files->alltags    ($LXR::Common::pathname)
						)
				}
#@V With a function, you MUST indicate a default version.
#@Q --- Default version name?; -1; ; head
#@A			, 'default' => '@A'
#@case_C	U
#@V Remember to write your 'range' function.
			, 'range' => sub
				{ # design your own function
					return 0
				}
			, 'default'	=> 0
#@end_C
#@end_C
			}

			# Define typed variable "a".  First value is default.
			# Meaningful for Linux kernel
			# Comment out for average user source-tree
	#	, 'a' =>
	#		{ 'name'  => 'Architecture'
	#		, 'range' => [qw(i386 alpha arm m68k mips ppc sparc sparc64)]
	#		}
		# NOTE: If you implement the 'a' variable against the Kernel tree,
		# don't rely on the above list of architectures. It is out-dated.
		# To get an accurate list, type the following command in a
		# terminal: ls path-to-kernel-source/arch/
		# The directories list in the output gives the up-to-date list.
		# Alternately, use template lxrkernel.conf dedicated to kernel
		# configuration.
		}

		# Subdirectory subsection #
		#=========================#
#@V Setting directory lists

		# Directories to always ignore. These usually are the SCM's
		# private directories which possibly may contain non-public
		# project history.
#@V Some directories may contain non-public project data (binaries,
#@V compilers caches, SCM control data, ...). They can be hidden from LXR.
#	, 'ignoredirs' => ['CVSROOT', '.git']
	, 'ignoredirs' =>	[qw(
#@QR --- Directory to ignore, e.g. CVSROOT or .git? (hit return to stop); -3
#@A					@A
						)]

		# Where to look for include files inside the sourcetree.
		# This is used to hyperlink to included files.
#@V If your source code uses "include" statements (#include, require, ...)
#@V LXR needs hints to resolve the destination file.
#	, 'incprefix' => [ '/include', '/include/linux' ]
	, 'incprefix' =>	[qw(
#@QR --- Include directory, e.g. /include? (hit return to stop); -3
#@A					@A
						)]

		# For the 2.x-3.x Linux kernel, use
#	, 'incprefix' => [ '/include', '/arch/%=ARCH=%/include' ]
		# Leave the %=ARCH=% as is. It is needed by the 'maps' rule
		# and will be transformed into the appropriate subdir name.

		# These do funky things to paths in the system - you probably don't need them.
# 	, 'maps' =>
# 			[ '/include/asm[^\/]*/' => '/include/asm-$a/'
# 			, '/arch/[^\/]+/'       => '/arch/$a/'
# 			],

		# For the 2.x-3.x Linux kernel, use
# 	, 'maps' =>
#			[ '^/arch/%-ARCH-%/' => '/arch/$a/'
# 			]
		# Having a fully functional set of 'incprefix'/'maps' directives
		# for the kernel is not a trivial task. It requires defining many
		# auxiliary variables which are dependent on the current development
		# state of the kernel.
		# Use template lxrkernel.conf.

		# Data storage subsection #
		#=========================#
#@V Configuring data storage

		# The DBI identifier for the database to use
		# For MySQL, the format is dbi:mysql:dbname=<name>
		# for Postgres, it is dbi:Pg:dbname=<name>;host=localhost
		# for Oracle, it is dbi:Oracle:host=localhost;sid=DEVMMS;port=1521
		# for SQLite, it is dbi:SQLite:dbname=<filename>
#@begin_O	dbengine==m
#@begin_O		dbpolicy==t
#@Q --- Database name?; -2
#@D DB_name=@A
#@end_O			dbpolicy==t
	, 'dbname' => 'dbi:mysql:dbname=%DB_name%'
#@end_O		dbengine==m
#-
#@begin_O	dbengine==o
	, 'dbname' => 'dbi:Oracle:host=localhost;sid=DEVMMS;port=1521'
#@end_O		dbengine==o
#-
#@begin_O	dbengine==p
#@begin_O		dbpolicy==t
#@Q --- Database name?; -2
#@D DB_name=@A
#@end_O			dbpolicy==t
	, 'dbname' => 'dbi:Pg:dbname=%DB_name%;host=localhost'
#@end_O		dbengine==p
#-
#@begin_O	dbengine==s
#@begin_O		dbpolicy==t
#@Q --- Database file? (e.g. /home/myself/storage.db); -2
#@D DB_name=@A
#@end_O			dbpolicy==t
	, 'dbname' => 'dbi:SQLite:dbname=%DB_name%'
#@end_O		dbengine==s
#-
#-
#@begin_O	dbengine!=s
#@begin_O		nodbuser
#@Q --- DB user name?; -1; ; lxr
#@D DB_tree_user=@A
#@Q --- DB password?; -1; ; lxrpw
#@D DB_tree_password=@A

	, 'dbuser'		=> '%DB_tree_user%'
	, 'dbpass'		=> '%DB_tree_password%'
#@end_O			nodbuser
#-
#@begin_O		dbuser
#@begin_O			dbpolicy==t
#@begin_C Do you want to override the global '%DB_user%' user name?; 2; yes,no; Y,N
#@case_C	Y
#@Q --- DB user name?; -1; ; lxr
#@D DB_tree_user=@A
#@Q --- DB password?; -1; ; lxrpw
#@D DB_tree_password=@A

	, 'dbuser'		=> '%DB_tree_user%'
	, 'dbpass'		=> '%DB_tree_password%'
#@case_C	N
		# If you need to specify the username or password for the database connection,
		# uncomment the following two lines
#	, 'dbuser'		=> 'lxr'
#	, 'dbpass'		=> 'lxrpw'
#@end_C
#@end_O				dbpolicy==t
#@end_O			dbuser
#@end_O		dbengine!=s
#-
#-
#@begin_O	nodbprefix
#@Q --- DB table prefix?; -1; ; lxr_
#@D DB_tbl_prefix=@A

	, 'dbprefix'	=> '%DB_tbl_prefix%'
#@end_O		nodbprefix
#-
#@begin_O	dbprefix
#@begin_O		dbpolicy==t

#@begin_C Do you want to override the global '%DB_global_prefix%' table prefix?; 2; yes,no; Y,N
#@case_C	Y
#@Q --- DB table prefix?; -1; ; lxr_
#@D DB_tbl_prefix=@A
	, 'dbprefix'	=> '%DB_tbl_prefix%'
#@case_C	N
		# If you need multiple lxr configurations in one database, set different table
		# prefixes for them.
#	, 'dbprefix'	=> 'lxr_'
#@end_C
#@end_O			dbpolicy==t
#@end_O		dbprefix

	# The following two parameters are now automatically
	# generated from 'glimpsedirbase' or 'swishdirbase' and
	# 'virtroot'.
	# They may nevertheless be overridden here by uncommenting
	# them and filling-in an appropriate absolute path.
		# For using glimpse, the directory to store the .glimpse files in is required
#	, 'glimpsedir' => '/path/to/glimpse/databases'
		# Location of swish-e index database files if using swish-e
#	, 'swishdir' => '/path/to/swish/databases'
	}

#@end_tree
#@here_tree
)
