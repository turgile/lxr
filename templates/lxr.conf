# -*- mode: perl -*-
# Configuration file
#
(
 {
  # Global configuration

  # 'glimpsebin'	=> '/info/lxr/bin/glimpse',
  'ectagsbin'	=> '/usr/bin/ctags',
  'tmpdir'		=> '/tmp',
  # Location of the Generic.pm config file
  'genericconf' => '/path/to/lib/LXR/Lang/generic.conf'

 },

 {
     # Configuration for http://karsk.ping.uio.no/~argggh/lxr.
     # baseurl is used to select configuration block.

     'baseurl'		=> 'http://192.168.1.3/lxr',
     'virtroot'		=> '/lxr',
     
     'variables' => {
	 # Define typed variable "v", read valueset from file.
	 'v' => {'name'    => 'Version',
		 'range'   => [ readfile('src/cvsversions') ], 

         # If files within a tree can have different versions,
		 # e.g in a CVS tree, 'range' can be specified as a
		 # function to call for each file:
		 #'range'   => sub { return 
		 #			($files->allreleases($LXR::Common::pathname),
		 #			 $files->allrevisions($LXR::Common::pathname))
		 #			}, # deferred function call.

		 'default' => '1.0.6'},
	 
	 # Define typed variable "a".  First value is default.
	 'a' => {'name'    => 'Architecture',
		 'range'   => [qw(i386 alpha arm m68k mips ppc sparc sparc64)]},
     },
     
     'maps' => {
	 '/include/asm[^\/]*/' => '/include/asm-$a/',
	 '/arch/[^\/]+/'       => '/arch/$a/',
     },

     
     # Templates used for headers and footers
     'htmlhead'		=> 'html-head.html',
     'htmltail'		=> 'html-tail.html',
     'htmldir'		=> 'html-dir.html',
     'htmlident'        => 'html-ident.html',
     
     'sourcehead'	=> 'html-head.html',
     'sourcedirhead'	=> 'html-head.html',
     'stylesheet'       => 'templates/lxr.css',

# sourceroot can either be the name of an ordinary directory
# containing one directory for each version, or cvs: and the name of a
# cvs repository

     'sourceroot'	=> '/home/malcolm/indexed-src',
#     'sourceroot'	=> 'cvs:/hom/karsk/a/CVSROOT/linux',
     'sourcerootname'	=> 'Example',
# where to look for include files inside the sourcetree
  'incprefix'	=> ['/include', '/include/linux'],

  # Which extensions to treat as images when browsing.  If a file is an image,
  # it is displayed.
  
  'graphicfile' => '(?i)\.(gif|jpg|jpeg|pjpg|pjpeg|xbm|png)$',

  # How to map files to languages
  # Note that the string for the key and the first entry in the
  # array MUST match
  'filetype' => {
				 # Format is
				 # Language name, filepatten regexp, module to invoke,
                 # (optional )tabwidth
				 # Note that to have another language supported by Generic.pm,
				 # you must ensure that:
				 # a) exuberant ctags supports it
				 # b) generic.conf is updated to specify information about the language
				 # c) the name of the language given here matches the entry in generic.conf
				 'C' => ['C', '\.c$' #'
				  , 'LXR::Lang::Generic', '8'],
				 'C++' => ['C++', '\.C$|((?i)\.c\+\+$|\.cc$|\.cpp$|\.cxx$|\.h$|\.hh$|\.hpp$|\.hxx$|\.h\+\+$)' #'
				  , 'LXR::Lang::Generic', '8'],

# Some languages are commented out until the relevant entries in generic.conf are made
# The list here is the set supported by ctags 5.0.1
# 				 ['Beta', '(?i)\.bet$' #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['Cobol', '(?i)\.cob$'  #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['Eiffel', '(?i)\.e$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['Fortran', '(?i)\.f$|\.for$|\.ftn$|\.f77$|\.f90$|\.f95$'   #'
# 				  , 'LXR::Lang::Generic'],
				 'Java' => ['Java', '(?i)\.java$'   #'
				  , 'LXR::Lang::Java', '4'],
# 				 ['Lisp', '(?i)\.cl$|\.clisp$|\.el$|\.l$|\.lisp$|\.lsp$|\.ml$'   #'
 # 				  , 'LXR::Lang::Generic'],
                  # No tabwidth specified here as an example
 				 'Make' => ['Make', '(?i)\.mak$|makefile*' #'
							, 'LXR::Lang::Generic'],
# 				 ['Pascal', '(?i)\.p$|\.pas$'   #'
# 				  , 'LXR::Lang::Generic'],
				 'Perl' => ['Perl', '(?i)\.pl$|\.pm$|\.perl$'   #'
				  , 'LXR::Lang::Generic', '4'],
 				 'php' => ['php', '(?i)\.php$|\.php3$|\.phtml$'   #'
 				  , 'LXR::Lang::Generic', '2'],
				 'Python' => ['Python', '(?i)\.py$|\.python$'   #'
				  , 'LXR::Lang::Generic', '4'],
# 				 ['rexx', '(?i)\.cmd$|\.rexx$|\.rx$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['ruby', '(?i)\.rb$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['scheme', '(?i)\.sch$|\.scheme$|\.scm$|\.sm$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['shell', '(?i)\.sh$|\.bsh$|\.bash$|\.ksh$|\.zsh$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['s-Lang', '(?i)\.sl$'   #'
# 				  , 'LXR::Lang::Generic'],
# 				 ['tcl', '(?i)\.tcl$|\.wish$'   #'
# 				  , 'LXR::Lang::Generic'],
				},
  
  # If dbname is a directory the db-file databases will be stored here
  # if a relational database is used the name is a dbi database specifier
  'dbname'		=> 'dbi:mysql:dbname=lxr',
# Used with the mysql backend
#  'dbpass'		=> 'foo',
#  'dbuser'		=> 'lxr'
  #     'dbname'		=> 'src/db',

  # For using glimpse, the directory to store the .glimpse files in is required
  'dbdir' => '/path/to/glimpse/database',
})
