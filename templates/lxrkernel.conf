# -*- mode: perl -*-
# LXR master configuration file for kernel browsing
#
#-	$Id: lxrkernel.conf,v 1.4 2012/09/22 09:23:34 ajlittoz Exp $
#-
#-
#- This is a specifically prepared lxr.conf template for kernel browsing.
#- Some sections are incomplete. Refer to the "standard" lxr.conf for
#- full comments or to the user's manual.
#-
#-	*************************************************************
#-	*															*
#-	*	Valid ONLY for a tree stored in ORDINARY PLAIN FILES	*
#-	*															*
#-	*	Use the "standard" lxr.conf template for CVS or Git 	*
#-	*	and find a way to enumerate the architecture and sub-	*
#-	*	architectures.											*
#-	*															*
#-	*************************************************************
#-	If you solve the enumeration issue above and store the lists
#-	in files, copy the 'version selection subsection', adapting
#-	the filenames and you'll benefit of full LXR power.
#-	Copy also the 'subdirectory section' to resolve #include links.
#-
#-	*************************************************************
#-
#	It is meant to be processed by script configure-lxr.pl:
#-		./scripts/configure-lxr.pl lxrkernel.conf
#-
#-	To add a new kernel tree (not a kernel version!):
#-		./scripts/configure-lxr.pl --add lxrkernel.conf
#-
# See also the important NOTE in the "version selection subsection".
#
#-	Merging kernel tree configuration section into lxr.conf to display
#-	the Linux kernel and other source trees is easy:
#-	1/ Starting with the other trees:
#-		./scripts/configure-lxr.pl lxr.conf
#-		./scripts/configure-lxr.pl --add --conf-out=lxr.conf lxrkernel.conf
#-	or
#-	2/ Starting with the kernel:
#-		./scripts/configure-lxr.pl --conf-out=lxr.conf lxrkernel.conf
#-		./scripts/configure-lxr.pl --add lxr.conf
#-
#@V
#@V Welcome in the Linux kernel browsing configurator
#@V
#@V Buttons-and-menus interface is highly recommended, otherwise your
#@V screen will be seriously cluttered and ugly.
#@V This interface is selected by the 'htmlhead' parameter in the
#@V	HTML subsection.
#
#	To use this file 'as is', move it to its final location with:
#		cp custom.d/lxrkernel.conf lxr.conf
# REMINDER: LXR expects its configuration file to be name lxr.conf
# NOTE:	this file is named lxrkernel.conf if you did not use
#		option --conf-out on the configure-lxr.pl command.
#-
#-	Have a pleasant navigation			-- ajl 2012/03/29
#-	updated for automatic configuration	-- ajl 2012/05/05

(
		################################
		# Global configuration section #
		################################

	{
		# Auxiliary tools subsection #
		#============================#
#@V Configuring auxiliary tool paths

		#- Place where lxr can write temporary files
	  'tmpdir' => '/tmp'

		#- Define this OR the swish-e variable depending which search engine you want to use.
		#- Path to glimpse executables.
		#- e.g.: , 'glimpsebin'   => '/usr/local/bin/glimpse'
#@U	, 'glimpsebin'     => '%glimpse%'
#@U	, 'glimpseindex'   => '%glimpseindex%'
#@U	, 'glimpsedirbase' => '%glimpsedirbase%'
		#- Location of SWISH-E binary
		#- e.g.: , 'swishbin' => '/usr/local/bin/swish-e'
#@U	, 'swishbin'     => '%swish%'
#@U	, 'swishdirbase' => '%swishdirbase%'
		#- Location of the SWISH-E.conf file
	, 'swishconf' => '%LXRroot%/templates/swish-e.conf'

		#- Path to Exuberant Ctags executable
	, 'ectagsbin' => '%ctags%'
		#- Location of the ectags.conf file
	, 'ectagsconf' => '%LXRroot%/templates/ectags.conf'

		#- Paths for CVS module
	, 'cvspath' => '/bin:/usr/local/bin:/usr/bin:/usr/sbin'

		# Computer DNS names subsection #
		#================================
#@V Configuring host name or IP (as http://...)
#@Q --- Host name?; -2
#@A	, 'host_names' =>	[ '@A'
#@QR --- Alias name ? (hit return to stop); -3
#@A						, '@A'
#-						, //localhost
#-						, https://192.168.1.1
#-						, 'http://mycomputer.outside.domain:12345'
						]

		# HTML subsection #
		#=================#
#@V Configuring HTML parameters

		# All paths in this subsection are relative to LXR root directory

		# Templates used for headers and footers
	, 'htmlfatal'		=> 'templates/html/html-fatal.html'
	, 'htmlhead'		=> 'templates/html/html-head-btn.html'
	, 'htmltail'		=> 'templates/html/html-tail.html'
	, 'htmldir'			=> 'templates/html/html-dir.html'
	, 'htmlident'		=> 'templates/html/html-ident.html'
	, 'htmlsearch'		=> 'templates/html/html-search-%search_engine%.html'
	, 'htmlconfig'		=> 'templates/html/html-config.html'

		# htmlhead and htmltail can be customised for the various
		# LXR operations. Just replace html by source (listing file),
		# sourcedir (displaying directory), diff (difference markup),
		# ident (identifier search), search (free-text search)
		# as below (which changes to link interface):
#	, 'sourcehead'		=> 'templates/html/html-head.html'
#	, 'sourcedirhead'	=> 'templates/html/html-head.html'

		# showconfig script is a bit special since "version" has
		# no meaning for it. Better to wipe out the 'variables' selection
		# links with an adequate header:
	, 'showconfighead'		=> 'templates/html/config-head-btn-smaller.html'

		# Default character width of left version (for diff)
	, 'diffleftwidth'	=> 50

		# Default identifier search constraint (for ident)
#	, 'identdefonly'	=> 1

		# CSS style sheet
	, 'stylesheet'		=> 'templates/lxr.css'
	, 'alternate_stylesheet' => [ 'templates/classic.css' ]

		# Default character encoding
	, 'encoding'	=> 'utf-8'

		# File management subsection #
		#============================#
#@V Configuring file subsection

		# Which extensions to treat as images when browsing.  If a file is an image,
		# it is displayed.
	, 'graphicfile' =>
		'bitmap|bmp|gif|icon?|jp2|jpe?g|pjpe?g|png|svg|tiff?|xbm|xpm'

		# Which file extensions are associated with which icon
		# Below is an example using 'Oxygen' theme available with KDE
		# small-icons/ is a symbolic link to
		#		 /usr/share/icons/oxygen/22x22/mimetypes/
		# (This location is valid for Fedora distributions,
		# check for others)
# 	, 'iconfolder' => 'small-icons/'
		# Don't forget the final / above.
# 	, 'icons' =>
# 		{	'c|pc'				=> 'text-x-csrc.png'
# 		,	'h|hh'				=> 'text-x-chdr.png'
# 		,	'c\+\+|cc|cpp|cxx'	=> 'text-x-c++src.png'
# 		,	'hpp|hxx|h\+\+'		=> 'text-x-c++hdr.png'
# 		,	'java'				=> 'text-x-java.png'
# 		,	'js'				=> 'application-x-javascript.png'
# 		,	'pl|pm|perl'		=> 'application-x-perl.png'
# 		,	'php|php3|phtml'	=> 'application-x-php.png'
# 		,	'py|python'			=> 'text-x-python.png'
# 		,	'sh|bsh|bash|ksh|zsh' => 'text-x-script.png'
# 		,	's?html?'			=> 'text-html.png'
# 		,	'css'				=> 'text-css.png'
# 		,	'pdf'				=> 'application-pdf.png'
# 		,	'txt'				=> 'text-plain.png'
# 		,	'p|pas'				=> 'text-x-pascal.png'
# 		,	'patch'				=> 'text-x-patch.png'
# 		,	'sql'				=> 'text-x-sql.png'
# 		,	'rb'				=> 'application-x-ruby.png'
# 		,	'ui'				=> 'text-xml.png'
# 		,	'.*\~'				=> 'application-x-trash'
# 		}
# 	, 'graphicicon' => 'image-x-generic.png'
# 	, 'defaulticon' => 'unknown.png'
# 	, 'diricon' => 'inode-directory.png'

		#- How to map files to languages
	, 'filetypeconf' => '%LXRroot%/templates/filetype.conf'

		#- Location of the Generic.pm config file
	, 'genericconf' => '%LXRroot%/lib/LXR/Lang/generic.conf'

		# "Common factor" subsection #
		#============================#
#@V Configuring "common factors"

		# In case your LXR installation controls several trees,
		# put here what you consider common parameters between
		# your source trees.
		# A parameter is "common" if its value must be simultaneously
		# adjusted in every tree.

		# Pattern for extracting tree name from URL, since all
		# trees are usually served from the same physical server.
	, 'treeextract' => '([^/]*)/[^/]*$'

#@begin_O	nodbuser
		# User name and password for DB access can be the same,
		# even if the database name is tree-specific.
#	, 'dbuser'		=> 'lxr'
#	, 'dbpass'		=> 'lxrpw'
#@end_O		nodbuser
#@begin_O	dbuser
	, 'dbuser'		=> '%DB_user%'
	, 'dbpass'		=> '%DB_password%'
#@end_O		dbuser
#@begin_O	nodbprefix
		# Table prefix is also a common parameter
		# unless you stuff all tree data in a single database.
		# It has a default hard-coded value:
#	, 'dbprefix'	=> 'lxr_'
#@end_O		nodbprefix
#@begin_O	dbprefix
	, 'dbprefix'	=> '%DB_global_prefix%'
#@end_O		dbprefix
	}

# ------------------------------------------------------------------------

		###############################
		# Tree configuration sections #
		###############################

#@V Marking tree section
#@begin_tree
# ------------------------------------------------------------------------
,	{

		# Server configuration subsection #
		#=================================#
#@V Configuring LXR server parameters

#@V The virtual root is the fixed URL part after the hostname.
#@begin_O	context==s
#@Q --- Virtual root? (i.e. URL part after host); -1; ; /lxr
#@end_O		context==s
#@begin_O	context==m
#@Q --- Virtual root? (i.e. URL part after host); -1; ; /lxr/kernel
#@end_O		context==m
#- The following @D allows automatic transfer of 'virtroot'
#- into lighttpd-lxrserver.conf.
#@D virtroot=@A
#@A	  'virtroot'    => '@A'

		#- Title for this tree to display in page header area
		#- if you aren't satisfied with the default
#@Q --- Caption in page header?; -1; ; Linux kernel cross-references
#@A	, 'caption' => '@A'
#@begin_O	context!=m
		# Button title to switch to this tree when multiple
		# trees are managed by LXR
#	, 'shortcaption' => 'Linux'
#@end_O		context!=m
#@begin_O	context==m
#@begin_Y Do you want a speed switch button for this tree ?; 1; yes, no; Y, N
#@Q --- Short title for button?; -1; ; Linux
#@A	, 'shortcaption' => '@A'
#@end_Y
#@end_O		context==m
#@begin_Y Do you need a specific encoding for this tree ?; 2; yes, no; Y, N

#@Q --- Encoding name? (e.g. iso-8859-1); -2
		# Character encoding (overrides default)
#@A	, 'encoding'	=> '@A'
#@end_Y

		# a link of the form (prefix)($filepath)(postfix) is generated when viewing a file
		#   example for cvsweb:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/cvsweb.cgi'
#	, 'cvswebpostfix' => '?cvsroot=rootname'
		#   example for viewcvs:
#	, 'cvswebprefix' => 'http://cvs.myhost.com/cgi-bin/viewcvs.cgi/myroot'
#	, 'cvswebpostfix' => ''

		# Tree location subsection #
		#==========================#
#@V Describing tree location

		# sourceroot - where to get the source files from
#@begin_C Is your tree stored in a VCS repository (cvs, git, svn, bitkeeper)?; 2; yes, no; Y, N
#@case_C N

		#- For ordinary directories, this specifies a directory which has each version as a
		#- subdirectory e.g.
		#-  project-tree/version1/...
		#-  project-tree/version2/...
		#- The names of the version directories must match the values for the Version
		#- variable (see the version selection subsection).
#@V A source directory contains one sub-directory for every version.
#@Q --- Source directory? (e.g. /home/myself/kernel-tree); -2
#@A	, 'sourceroot' => '@A'
#@case_C Y
#@Q Sorry, invalid configuration! You are allowed to continue but; 1; next; y
#@Q stop when asked for a new tree. Then, remove the last tree sections; 1; next; y
#@Q from the output files (*.conf and initdb.sh) and start again ; 1; next; y
#@Q either with standard configuration driver lxr.conf for VCSes ; 1; next; y
#@Q or with lxrkernel.conf after having extracted kernel source  ; 1; next; y
#@Q to ordinary files and directories.                           ; 1; next; y
#@Q NOTE: be careful to keep the #@here_tree label and the last  ; 1; next; y
#@Q       right parenthesis.                                     ; 1; OK I understand; y
#@end_C

		# The string to display as the base part of every path in the tree
	, 'sourcerootname' => '$v'

		# Version selection subsection #
		#==============================#
#@V Enumerating versions
#@V This relies on script kernel-vars-grab.sh

	, 'variables' =>

			# Define various variables to configure #include path
			# remapping.
			# 'range' file lists are initialised by kernel-vars-grab.sh
			# script to run before the genxref step.

			# NOTE:	the filenames below are written with the default
			# ----|	suffix (_list.txt) used in script kernel-vars-grab.sh.
			#     |	If you launched the script with a custom suffix,
			#     |	you must manually make the adjustment.

		{ 'v' =>
			{ 'name' => 'Version'
			, 'range' => [ readfile('custom.d/version_list.txt') ]
				# The default version to display
			}
		, 'a' =>
			{ 'name'  => 'Architecture'
			, 'range' => [ readfile('custom.d/arch_list.txt') ]
			, 'default' => 'x86'
			}
		, 'arm_mach' =>
			{ 'name'  => 'ARM machine'
			, 'when'  => '"$a" eq "arm"'
			, 'range' => [ readfile('custom.d/arm_mach_list.txt') ]
			}
		, 'arm_plat' =>
			{ 'name'  => 'ARM platform'
			, 'when'  => '"$a" eq "arm"'
			, 'range' => [ readfile('custom.d/arm_plat_list.txt') ]
			}
		, 'avr32_mach' =>
			{ 'name'  => 'AVR32 machine'
			, 'when'  => '"$a" eq "avr32"'
			, 'range' => [ readfile('custom.d/avr32_mach_list.txt') ]
			}
		, 'blackfin_mach' =>
			{ 'name'  => 'Blackfin machine'
			, 'when'  => '"$a" eq "blackfin"'
			, 'range' => [ readfile('custom.d/blackfin_mach_list.txt') ]
			}
		, 'cris_arch' =>
			{ 'name'  => 'CRIS architecture'
			, 'when'  => '"$a" eq "cris"'
			, 'range' => [ readfile('custom.d/cris_arch_list.txt') ]
			}
		, 'mn10300_proc' =>
			{ 'name'  => 'MN10300 processor'
			, 'when'  => '"$a" eq "mn10300"'
			, 'range' => [ readfile('custom.d/mn10300_proc_list.txt') ]
			}
		, 'mn10300_unit' =>
			{ 'name'  => 'MN10300 unit'
			, 'when'  => '"$a" eq "mn10300"'
			, 'range' => [ readfile('custom.d/mn10300_unit_list.txt') ]
			}
		, 'um_sys' =>
			{ 'name'  => 'UM system'
			, 'when'  => '"$a" eq "um"'
			, 'range' => [ readfile('custom.d/um_sys_list.txt') ]
			}
		}

		# Subdirectory subsection #
		#=========================#
#@V Setting directory lists

		# Directories to always ignore. These usually are the SCM's
		# private directories which possibly may contain non-public
		# project history.
#@V Some directories may contain non-public project data (binaries,
#@V compilers caches, SCM control data, ...). They can be hidden from LXR.
	, 'ignoredirs' =>	[qw(
#@QR --- Directory to ignore, e.g. CVSROOT or .git? (hit return to stop); -3
#@A					@A
						)]

		# Where to look for include files inside the sourcetree.
		# This is used to hyperlink to included files.
	, 'incprefix' =>	[ '/include'
						, '/arch/%=ARCH=%/include'
						, '/arch/%=ARCH=%/%=LVL2A=%/include'
						, '/arch/%=ARCH=%/%=LVL2B=%/include'
						]

		# Leave the %=xxx=% as is. They are needed by the 'maps' rule
		# and will be transformed into the appropriate subdir name.

		# These will translate the virtual #include path into the real path
		# if the target file exists.
	, 'maps' =>
			[ '^/arch/%=ARCH=%/'			=> '/arch/$a/'
			, '^/arch/arm/%=LVL2A=%/'		=> '/arch/arm/mach-${arm_mach}/'
			, '^/arch/arm/%=LVL2B=%/'		=> '/arch/arm/plat-${arm_plat}/'
			, '^/arch/avr32/%=LVL2A=%/'		=> '/arch/avr32/mach-${avr32_mach}/'
			, '^/arch/blackfin/%=LVL2A=%/'	=> '/arch/blackfin/mach-${blackfin_mach}/'
			, '^/arch/cris/%=LVL2A=%/'		=> '/arch/cris/arch-${cris_arch}/'
			, '^/arch/mn10300/%=LVL2A=%/'	=> '/arch/mn10300/proc-${mn10300_proc}/'
			, '^/arch/mn10300/%=LVL2B=%/'	=> '/arch/mn10300/unit-${mn10300_unit}/'
			, '^/arch/um/%=LVL2A=%/'		=> '/arch/um/arch-${um_sys}/'
			]

		# Data storage subsection #
		#=========================#
#@V Configuring data storage

		# The DBI identifier for the database to use
		# For MySQL, the format is dbi:mysql:dbname=<name>
		# for Postgres, it is dbi:Pg:dbname=<name>;host=localhost
		# for Oracle, it is dbi:Oracle:host=localhost;sid=DEVMMS;port=1521
		# SQLite is not recommended for the kernel: the file maximum size is
		#	unlikely to be compatible with the amount of data
#@begin_O	dbengine==m
#@begin_O		dbpolicy==t
#@Q --- Database name?; -1; ; kernel
#@D DB_name=@A
#@end_O			dbpolicy==t
	, 'dbname' => 'dbi:mysql:dbname=%DB_name%'
#@end_O		dbengine==m
#-
#@begin_O	dbengine==o
	, 'dbname' => 'dbi:Oracle:host=localhost;sid=DEVMMS;port=1521'
#@end_O		dbengine==o
#-
#@begin_O	dbengine==p
#@begin_O		dbpolicy==t
#@Q --- Database name?; -1; ; kernel
#@D DB_name=@A
#@end_O			dbpolicy==t
	, 'dbname' => 'dbi:Pg:dbname=%DB_name%;host=localhost'
#@end_O		dbengine==p
#-
#-
#@begin_O	nodbuser
#@Q --- DB user name?; -1; ; lxr
#@D DB_tree_user=@A
#@Q --- DB password?; -1; ; lxrpw
#@D DB_tree_password=@A

	, 'dbuser'		=> '%DB_tree_user%'
	, 'dbpass'		=> '%DB_tree_password%'
#@end_O		nodbuser
#-
#@begin_O	dbuser
#@begin_O		dbpolicy==t
#@begin_C Do you want to override the global '%DB_user%' user name?; 2; yes,no; Y,N
#@case_C	Y
#@Q --- DB user name?; -1; ; lxr
#@D DB_tree_user=@A
#@Q --- DB password?; -1; ; lxrpw
#@D DB_tree_password=@A

	, 'dbuser'		=> '%DB_tree_user%'
	, 'dbpass'		=> '%DB_tree_password%'
#@case_C	N
		# If you need to specify the username or password for the database connection,
		# uncomment the following two lines
#	, 'dbuser'		=> 'lxr'
#	, 'dbpass'		=> 'lxrpw'
#@end_C
#@end_O			dbpolicy==t
#@end_O		dbuser
#-
#-
#@begin_O	nodbprefix
#@Q --- DB table prefix?; -1; ; lxr_
#@D DB_tbl_prefix=@A

	, 'dbprefix'	=> '%DB_tbl_prefix%'
#@end_O		nodbprefix
#-
#@begin_O	dbprefix
#@begin_O		dbpolicy==t

#@begin_C Do you want to override the global '%DB_global_prefix%' table prefix?; 2; yes,no; Y,N
#@case_C	Y
#@Q --- DB table prefix?; -1; ; lxr_
#@D DB_tbl_prefix=@A
	, 'dbprefix'	=> '%DB_tbl_prefix%'
#@case_C	N
		# If you need multiple lxr configurations in one database, set different table
		# prefixes for them.
#	, 'dbprefix'	=> 'lxr_'
#@end_C
#@end_O			dbpolicy==t
#@end_O		dbprefix

	# The following two parameters are now automatically
	# generated from 'glimpsedirbase' or 'swishdirbase' and
	# 'virtroot'.
	# They may nevertheless be overridden here by uncommenting
	# them and filling-in an appropriate absolute path.
		# For using glimpse, the directory to store the .glimpse files in is required
#	, 'glimpsedir' => '/path/to/glimpse/databases'
		# Location of swish-e index database files if using swish-e
#	, 'swishdir' => '/path/to/swish/databases'
	}

#@end_tree
#@here_tree
)
