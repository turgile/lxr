# -*- mode: perl -*-
# LXR master configuration file for kernel browsing
#
#- This is a specifically prepared lxr.conf template for kernel browsing.
#- Some sections are incomplete. Refer to the "standard" lxr.conf for
#- full comments or to the user's manual.
#-
#-	*************************************************************
#-	*															*
#-	*	Valid ONLY for a tree stored in ORDINARY PLAIN FILES	*
#-	*															*
#-	*	Use the "standard" lxr.conf template for CVS or Git 	*
#-	*	and find a way to enumerate the architecture and sub-	*
#-	*	architectures.											*
#-	*															*
#-	*************************************************************
#-	If you solve the enumeration issue above and store the lists
#-	in files, copy the 'version selection subsection', adapting
#-	the filenames and you'll benefit of full LXR power.
#-	Copy also the 'subdirectory section' to resolve #include links.
#-
#-	*************************************************************
#-
#	It is meant to be processed by script configure-lxr.pl:
#-		./scripts/configure-lxr.pl lxrkernel.conf
#-
#-	To add a new kernel tree (not a kernel version!):
#-		./scripts/configure-lxr.pl --add lxrkernel.conf
#-
# See also the important NOTE in the "version selection subsection".
#
#-	Merging kernel tree configuration section into lxr.conf to display
#-	the Linux kernel and other source trees is easy:
#-	1/ Starting with the other trees:
#-		./scripts/configure-lxr.pl lxr.conf
#-		./scripts/configure-lxr.pl --add --conf-out=lxr.conf lxrkernel.conf
#-	or
#-	2/ Starting with the kernel:
#-		./scripts/configure-lxr.pl --conf-out=lxr.conf lxrkernel.conf
#-		./scripts/configure-lxr.pl --add lxr.conf
#-
#@LOG Welcome to the Linux kernel browsing configurator
#@LOG
#@MSG Buttons-and-menus interface is highly recommended, otherwise your
#@MSG screen will be seriously cluttered and ugly.
#@MSG This interface is selected by the 'htmlhead' parameter in the
#@MSG HTML subsection.
#
#	To use this file 'as is', move it to its final location with:
#		cp custom.d/lxrkernel.conf lxr.conf
# REMINDER: LXR expects its configuration file to be name lxr.conf
# NOTE:	this file is named lxrkernel.conf if you did not use
#		option --conf-out on the configure-lxr.pl command.
#-
#-	Have a pleasant navigation			-- ajl 2012/03/29
#-	updated for automatic configuration	-- ajl 2012/05/05
#-	updated to use LCL statements		-- ajl 2012/11/30
#-	updated for web server config.		-- ajl 2013/01/20
#-	updated for more common factoring	-- ajl 2013/05/13
#-	added answer validation criteria	-- ajl 2013/11/06
#-	fixed all parameter file path to OS-absajl 2014/10/25

(
		################################
		# Global configuration section #
		################################

#@ADD	global.conf.part

# ------------------------------------------------------------------------

		###############################
		# Tree configuration sections #
		###############################

#@LOG Marking tree section
#@PASS2 here_tree
# ------------------------------------------------------------------------
,	{

	# This kernel LXR configuration is generated from 
	# a template contributed by AndrÃ© Littoz (C) 2012-2013

		# Server configuration subsection #
		#=================================#
#@ADD	tree-server1.conf.part

		#- Title for this tree to display in page header area
		#- if you aren't satisfied with the default
#@ASK --- Caption in page header?; -1; ; Linux kernel cross-references
#@CANONR ',\'
	  'caption' => '%A%'
#@ADD	tree-server2.conf.part

		# Tree location subsection #
		#==========================#
#@LOG Describing tree location

		# sourceroot - where to get the source files from
#@ASK,C Is your tree stored in a VCS repository (cvs, git, svn, bitkeeper)?; 2; yes, no; Y, N
#@CASE	%C%
#@N:

		#- For ordinary directories, this specifies a directory which has each version as a
		#- subdirectory e.g.
		#-  project-tree/version1/...
		#-  project-tree/version2/...
		#- The names of the version directories must match the values for the Version
		#- variable (see the version selection subsection).
#@	MSG A source directory contains one sub-directory for every version.
#@	ASK --- Source directory? (e.g. /home/myself/project-tree); -2\
	#@		; ^/,absolute file path required
#@	CANON /+$,,^/+,/
#@	CANONR ',\'
	, 'sourceroot' => '%A%'
#-
#@Y:
#@ERROR Sorry, invalid configuration! You are allowed to continue but
#@ERROR stop when asked for a new tree. Then, remove the last tree sections
#@ERROR from the output files (*.conf and initdb.sh) and start again
#@ERROR either with standard configuration driver lxr.conf for VCSes
#@ERROR or with lxrkernel.conf after having extracted kernel source
#@ERROR to ordinary files and directories.
#@ERROR NOTE: be careful to keep the #@here_tree: label and the last
#@ERROR       right parenthesis.
#@ASK --- Continue now?; 1; OK I understand; y
#@ENDC

		# The string to display as the base part of every path in the tree
	, 'sourcerootname' => '$v'

		# Version selection subsection #
		#==============================#
#@LOG Enumerating versions
#@MSG This relies on script kernel-vars-grab.sh

	, 'variables' =>

			# Define various variables to configure #include path
			# remapping.
			# 'range' file lists are initialised by kernel-vars-grab.sh
			# script to run before the genxref step.

			# NOTE:	the filenames below are written with the default
			# ----|	suffix (_list.txt) used in script kernel-vars-grab.sh.
			#     |	If you launched the script with a custom suffix,
			#     |	you must manually make the adjustment.

		{ 'v' =>
#@ASK Label for version selection menu? ; -1; ; Version
#@CANONR ',\'
			{ 'name' => '%A%'
#@MSG Versions are retrieved from file %LXRconfdir%/version_list.txt
#@MSG They are collected into this file by script kernel-vars-grab.sh
				# This is the list of versions to index.
			, 'range' => [ readfile('%LXRconfdir%/version_list.txt') ]
#- - Default initial version to display
#@MSG By default, first version in list is displayed. You may also indicate
#@MSG a prefered version.
#@	ASK	--- Default displayed version is first in 'range'?; 1; yes,no; Y,N
#@	IF	"%A%" eq 'N'
#@		ASK,N --- Default version name?; -2
#@		CANONR ',\'
			, 'default' => '%N%'
#@	ELSE
				# The default version to display
				# If not specified, first in 'range' used
#			, 'default' => 'v3.1'
#@	ENDIF
			}
		, 'a' =>
#@ASK Label for architecture selection menu? ; -1; ; Architecture
#@CANONR ',\'
			{ 'name' => '%A%'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/arch_list.txt') ]
			, 'default' => 'x86'
			}
		, 'arm_mach' =>
			{ 'name'  => 'ARM machine'
			, 'when'  => '"$a" eq "arm"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/arm_mach_list.txt') ]
			}
		, 'arm_plat' =>
			{ 'name'  => 'ARM platform'
			, 'when'  => '"$a" eq "arm"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/arm_plat_list.txt') ]
			}
		, 'avr32_mach' =>
			{ 'name'  => 'AVR32 machine'
			, 'when'  => '"$a" eq "avr32"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/avr32_mach_list.txt') ]
			}
		, 'blackfin_mach' =>
			{ 'name'  => 'Blackfin machine'
			, 'when'  => '"$a" eq "blackfin"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/blackfin_mach_list.txt') ]
			}
		, 'cris_arch' =>
			{ 'name'  => 'CRIS architecture'
			, 'when'  => '"$a" eq "cris"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/cris_arch_list.txt') ]
			}
		, 'mn10300_proc' =>
			{ 'name'  => 'MN10300 processor'
			, 'when'  => '"$a" eq "mn10300"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/mn10300_proc_list.txt') ]
			}
		, 'mn10300_unit' =>
			{ 'name'  => 'MN10300 unit'
			, 'when'  => '"$a" eq "mn10300"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/mn10300_unit_list.txt') ]
			}
		, 'um_sys' =>
			{ 'name'  => 'UM system'
			, 'when'  => '"$a" eq "um"'
			, 'range' => [ readfile('%LXRroot%/%LXRconfdir%/um_sys_list.txt') ]
			}
		}

		# Subdirectory subsection #
		#=========================#
#@LOG Setting directory lists
#@ADD tree-ignore.conf.part

		# Where to look for include files inside the sourcetree.
		# This is used to hyperlink to included files.
	, 'incprefix' =>	[ '/include'
						, '/arch/%=ARCH=%/include'
						, '/arch/%=ARCH=%/%=LVL2A=%/include'
						, '/arch/%=ARCH=%/%=LVL2B=%/include'
						]

		# Leave the %=xxx=% as is. They are needed by the 'maps' rule
		# and will be transformed into the appropriate subdir name.

		# These will translate the virtual #include path into the real path
		# if the target file exists.
	, 'maps' =>
			[ '^/arch/%=ARCH=%/'			=> '/arch/$a/'
			, '^/arch/arm/%=LVL2A=%/'		=> '/arch/arm/mach-${arm_mach}/'
			, '^/arch/arm/%=LVL2B=%/'		=> '/arch/arm/plat-${arm_plat}/'
			, '^/arch/avr32/%=LVL2A=%/'		=> '/arch/avr32/mach-${avr32_mach}/'
			, '^/arch/blackfin/%=LVL2A=%/'	=> '/arch/blackfin/mach-${blackfin_mach}/'
			, '^/arch/cris/%=LVL2A=%/'		=> '/arch/cris/arch-${cris_arch}/'
			, '^/arch/mn10300/%=LVL2A=%/'	=> '/arch/mn10300/proc-${mn10300_proc}/'
			, '^/arch/mn10300/%=LVL2B=%/'	=> '/arch/mn10300/unit-${mn10300_unit}/'
			, '^/arch/um/%=LVL2A=%/'		=> '/arch/um/arch-${um_sys}/'
			]

		# Data storage subsection #
		#=========================#
#-
#@ADD	datastorage.conf.part
#-
	}

#@ENDP2
)
