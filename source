#!/usr/bin/perl
# $Id: source,v 1.7 1999/05/14 17:31:30 argggh Exp $

# source --	Present sourcecode as html, complete with references
#
#	Arne Georg Gleditsch <argggh@ifi.uio.no>
#	Per Kristian Gjermshus <pergj@ifi.uio.no>
#
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

######################################################################

use strict;

use Local;
use lib 'lib';
use lib '/local/lxr/lib/perl5/site_perl';
use SimpleParse;
use LXR::Common;
use LXR::Config;
use LXR::Files;
use LXR::Index;

use vars qw($files $index $Path $HTTP $filename $release $parentdir $line $color @dirs @files %index);

sub diricon {
    my ($img, $link);
    if ($filename eq '..') {
	$img = "/icons/back.gif";
	$link = $parentdir;
    } else {
#      $img = "/icons/folder.gif";
	$img = "internal-gopher-menu";
	$link = $Path->{'virt'}.$filename;
    }
    return(&fileref("<IMG ALIGN=ABSBOTTOM BORDER=0 SRC=\"$img\">", $link));
}


sub dirname {
    if ($filename eq '..') {
	return(&fileref("Parent directory", $parentdir));
    } else {
	return(&fileref($filename, $Path->{'virt'}.$filename));
    }
}


sub fileicon {
    my $img;

    if ($filename =~ /^.*\.[ch]$/) {
#      $img = "/icons/c.gif";
	$img = "internal-gopher-text";
    } elsif ($filename =~ /^.*\.(cpp|cc|java)$/) {
	# TODO: Find a nice icon for c++ files (KDE?)
#      $img = "/icons/c.gif";
	$img = "internal-gopher-text";
    } else {		
	#      $img = "/icons/text.gif";
	$img = "internal-gopher-unknown";
    }
    return(&fileref("<IMG ALIGN=ABSBOTTOM BORDER=0 SRC=\"$img\">",
		    $Path->{'virt'}.$filename));
}

sub filename {
    return(&fileref($filename,
		    $Path->{'virt'}.$filename));
}

sub filesize {
    my $templ = shift;
    my $s = $files->getfilesize($parentdir.$filename, $release);
    my $str;

    if ($s < 1<<10) {
       $str = "$s";
   } else {
#      if ($s < 1<<20) {
	$str = ($s>>10) . "k";
#      } else {
#          $str = ($s>>20) . "M";
#      }
    }
    return(&expandtemplate($templ,
			   ('bytes',    sub {return($str)}),
			   ('kbytes',   sub {return($str)}),
			   ('mbytes',   sub {return($str)})
                           ));
}

sub modtime {
    my $current_time = time;
    my $file_time = $files->getfiletime($parentdir.$filename, $release);
    
    my @t = gmtime($file_time);
    
    my @months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun",
		  "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
    my ($sec, $min, $hour, $mday, $mon, $year) = @t;
    $year += 1900;
    $mon = $months[$mon];
    
    my $one_hour = (60 * 60);
    my $six_months = $one_hour * 24 * int(365/2);
    
    if ($file_time <= ($current_time - $six_months) ||
	$file_time >= ($current_time + $one_hour)) {
	return sprintf("%s %2d  %04d", $mon, $mday, $year);
    } else {
	return sprintf("%s %2d %02d:%02d", $mon, $mday, $hour, $min);
    }
}

sub bgcolor {
    return ((($line - 1) / 3) % 2) ? "#FFFFFF" : "#CCCCCC";
}

sub direxpand {
    my $templ = shift;
    my $direx = '';
    local $line = 0;
    local $filename;
    local $color="#FFFFFF";
    my $virtpath = $Path->{'virt'};
    my $realpath = $Path->{'real'};


    foreach $filename (@dirs) {
	$line++;
	$direx .= &expandtemplate($templ,
				  ('iconlink',		\&diricon),
				  ('namelink',		\&dirname),
				  ('filesize',		sub {return('-')}),
				  ('modtime',		\&modtime),
				  ('bgcolor',		\&bgcolor),
				  ('description',	\&descexpand));
    }
	
    foreach $filename (@files) {
	next if $filename =~ /^.*\.[oa]$|^core$|^00-INDEX$/;
	$line++;
	$direx .= &expandtemplate($templ,
				  ('iconlink',		\&fileicon),
				  ('namelink',		\&filename),
				  ('filesize',		\&filesize),
				  ('modtime',		\&modtime),
				  ('bgcolor',		\&bgcolor),
				  ('description',	\&descexpand));
    }

    return($direx);
}

sub printdir {
    my $template;
    my $index;
    my @nodes;
    local %index;
    local @dirs;
    local @files;
    local $parentdir;

    
    $template = "<ul>\n\$files{\n<li>\$iconlink \$namelink\n}</ul>\n";
    if ($Conf->htmldir) {
	unless (open(TEMPL, $Conf->htmldir)) {
	    &warning("Template ".$Conf->htmldir." does not exist.");
	} else {
	    local($/) = undef;
	    $template = <TEMPL>;
	    close(TEMPL);
	}
    }
    
    $parentdir = $filename;
    @nodes = $files->getdir($filename, $release);
    unless (@nodes) {
	print("<p align=center>\n<i>The directory ".
	      $files->toreal($filename, $release).
	      " does not exist.</i>\n");
	#FIXME what does this do?
	if ($files->toreal($filename, $release) =~ m#(.+[^/])[/]*$# ) {
	    if (-e $1) {
		&warning("Unable to open ".$Path->{'real'});
	    }
	}
	return;
    }
       
    @dirs  = grep { $files->isdir($filename.$_, $release) } @nodes;
    @files = grep { ! $files->isdir($filename.$_, $release) } @nodes;

    %index = $files->getindex($filename, $release);

    unshift(@dirs, '..') unless $parentdir eq '/';
    
    # print the description of the current directory
    dirdesc($parentdir);
    
    # print the listing itself
    print(&expandtemplate($template,
			  ('files',	\&direxpand)));
}


sub printfile {
    unless ($Path->{'file'}) {
	&printdir;
    } else {
	my $buffer = $files->getfile($filename, $release);

	if ($buffer) {
	    if ($filename =~ /\.(html)$/) {
		print($buffer);
	    } elsif ($filename =~ /README$/) {
		print("<pre>",
		      markupstring($buffer, $filename, $index),
		      "</pre>");
	    } else {
		print("<pre>");
		markupfile(\$buffer, $Path->{'virt'}, $index,
			   $Path->{'file'}, sub { print shift });
		print("</pre>");
	    }

	} else {
	    print("\<p align=center>\n<i>The file $filename does not exist.</i>\n");
	    if (-f $Path->{'real'}.$Path->{'file'}) {
		&warning("Unable to open ".$Path->{'realf'});
	    }
	}
    }
}

($Conf, $HTTP, $Path) = &init($0);

$files = new LXR::Files($Conf->sourceroot);
$index = new LXR::Index($Conf->dbname);

$filename = $Path->{'virtf'};
$release = $Conf->variable('v');

#if the file is html then don't print a header because the file
#has its own 
if (!($Path->{'file'} =~ /\.(html)$/)) {
    if ($Path->{'file'}) {
	&makeheader('source');
    } else {
	&makeheader('sourcedir');
    }
}

&printfile;

if (!($Path->{'file'} =~ /\.(html)$/)) {
    if ($Path->{'file'}) {
	&makefooter('source');
    } else {
	&makefooter('sourcedir');
   }
}
